1812.05407v1 [cs.CL] 13 Dec 2018

ar X1V

Abstractive Text Summarization by Incorporating Reader Comments

Shen Gao,! Xiuying Chen,! Piji Li,> Zhaochun Ren,’ Lidong Bing,” Dongyan Zhao,!? Rui Yan*!”
‘Institute of Computer Science and Technology, Peking University, Beijing, China
Center for Data Science, Peking University, Beijing, China
3Tencent AI Lab, Shenzhen, China
*JD.com, Beijing, China
-R&D Center Singapore, Machine Intelligence Technology, Alibaba DAMO Academy
{shengao, xy-chen, zhaody, ruiyan} @pku.edu.cn, pijili@tencent.com, renzhaochun@jd.com, |.bing @alibaba-inc.com

Abstract

In neural abstractive summarization field, conventional
sequence-to-sequence based models often suffer from summarizing the wrong aspect of the document with respect to
the main aspect. To tackle this problem, we propose the task
of reader-aware abstractive summary generation, which utilizes the reader comments to help the model produce better
summary about the main aspect. Unlike traditional abstractive
summarization task, reader-aware summarization confronts
two main challenges: (1) Comments are informal and noisy;
(2) jointly modeling the news document and the reader comments is challenging. To tackle the above challenges, we design an adversarial learning model named reader-aware summary generator (RASG), which consists of four components:
(1) a sequence-to-sequence based summary generator; (2) a
reader attention module capturing the reader focused aspects;
(3) a supervisor modeling the semantic gap between the generated summary and reader focused aspects; (4) a goal tracker
producing the goal for each generation step. The supervisor
and the goal tacker are used to guide the training of our framework in an adversarial manner. Extensive experiments are
conducted on our large-scale real-world text summarization
dataset, and the results show that RASG achieves the stateof-the-art performance in terms of both automatic metrics
and human evaluations. The experimental results also demonstrate the effectiveness of each module in our framework. We
release our large-scale dataset for further research’.

Introduction

Abstractive summarization can be regarded as a sequence
mapping task that the source text is mapped to the target
summary, and has drawn much attention since the deep neural networks are widely applied in natural language processing field. Recently, sequence-to-sequence (seq2seq) framework (Sutskever, Vinyals, and Le 2014) has been proved effective for the task of abstractive summarization (Chopra,
Auli, and Rush 2016; See, Liu, and Manning 2017) and
other text generation tasks (Tao et al. 2018; Gao et al.
2019). In this paper, we use “aspect” to denote the topic
described in a specific paragraph or a sentence of a news
document, and use “main aspect” to denote the central

“Corresponding author: Rui Yan (ruiyan @pku.edu.cn)
Copyright © 2019, Association for the Advancement of Artificial
Intelligence (www.aaai.org). All rights reserved.

‘http: //t.cn/EAH5IxS

Table 1: Examples of the text summarization. The text in red
denotes the focused aspect by the good summary, while the
text in blue is described by the bad summary. The text with
underline is the focused aspect by reader comments.

document On August 28, according to a person familiar with the matter,

Toyota Motor Corporation will invest 500 million U.S. dol
 

lars into the Uber, a taxi service company, with a valuation
of up to 72 billion U.S. dollars. The investment will focus on

 

driverless car technology. However, its development path is
not smooth. In March of this year, a Uber driverless car hit
a woman and caused her death. In last year, Softbank also
invested into Uber with a valuation of $48 billion.

Toyota’s investment in Uber is a wise choice.

comments rer ;
$500 million investment is really a lot of money!
good summary Toyota invests $500 million into Uber with a valuation of $72
billion

bad summary An Uber driverless car hits a passerby to death

 

topic which the author tends to convey to the readers. AlIthough a document may describe an event in many different aspects, the summary of this document should always
focus on the main aspect. As shown in Table 1, the good
summary describes the main aspect and the bad summary
describes another trivial aspect that is not the main point
of the document. To focus on the main aspect, some summarization methods (Sun et al. 2018; Zhou et al. 2017;
Bansal and Chen 2018) first select several sentences about
the main aspect and then generate the summary. However, it
is very challenging to discover which is the main aspect of
the news document.

Nowadays, a great number of news comments are generated by readers to express their opinions about the event.
Some comments may mention the main aspect of the document for several times. Take the case in Table 1 as an example, the focused aspect of the reader is “investment of
Toyota” which is also the main aspect of this document. To
be specific, we define “reader focused aspect” to denote
the focused aspect by a reader through the comments. Intuitively, these reader comments may help the summary generator capture the main aspect of document, thereby improving the quality of the generated summary. Therefore, in this
paper, we investigate a new problem setting of the task of
abstractive text summarization. We name such paradigm of
extension as reader-aware abstractive text summarization.

The effect of comments or social contexts in document summarization have been explored by several previous works (Hu, Sun, and Lim 2008; Yang et al. 2011;
Li et al. 2015; Li, Bing, and Lam 2017). Unlike these
approaches that directly extract sentences from the original document (Hu, Sun, and Lim 2008; Yang et al. 2011;
Li et al. 2015), we aim to generate a natural-sounding summary from scratch instead of extracting words from the document.

Generally, existing text summarization approaches confront two challenges when addressing reader-aware summarization task. The first challenge is that reader comments are
very noisy and informative. Not all the information provided
by the comments is useful when modeling the reader focused
aspects. Therefore, it is crucial to make the model own the
ability of capturing main aspect and filtering noisy information when incorporating reader comments. The second
challenge is how to generate summaries by jointly modeling
the main aspect of document and the reader focused aspect
revealed by comments. Meanwhile, the model should not
be sensitive to the diverse unimportant aspects introduced
by some reader comments. Thus, simply absorbing all the
reader aspect information to directly guide the model to generate summary is not feasible, as it will make the generator
lose the ability of modeling the main aspect.

In this paper, we propose a summarization framework
named reader-aware summary generator (RASG) that incorporates reader comments to improve the summarization
performance. Specifically, a seq2seq architecture with attention mechanism is employed as the basic summary generator. We first calculate alignment between the reader comments words and document words, and this alignment information is regarded as reader attention representing the
“reader focused aspect”. Then, we treat the decoder attention weights as the focused aspect of the generated summary,
a.k.a., “decoder focused aspect’. After each decoding step,
a supervisor is designed to measure the distance between
the reader focused aspect and the decoder focused aspect.
Given this distance, a goal tracker provides the goal to the
decoder to induce it to reduce this distance. The training of
our framework RASG is conducted in an adversarial way.
To evaluate the performance of our model, we collect a large
amount of document-summary pairs associated with several
reader comments from social media website. Extensive experiments conducted on this dataset show that RASG significantly outperforms the state-of-the-art baselines in terms of
ROUGE metrics and human evaluations.

To sum up, our contributions can be summarized as follows:

e We propose a reader-aware abstractive text summarization task. To solve this task, we propose an end-to-end learning framework to conduct the reader attention modeling and
reader-aware summary generation.

e We design a supervisor as well as a goal tracker to guide
the generator to focus on the main aspect of the document.

e To reduce the noisy information introduced by the
reader comments, we propose a denoising module to identify
which comments are helpful for summary generation auto
matically.

e We release a large scale abstractive text summarization
dataset associated with reader comments. Experimental results on this dataset demonstrate the effectiveness of our proposed framework.

Related Work

Text summarization can be classified into extractive and abstractive methods. Extractive methods (Jadhav and Rajan
2018; Narayan, Cohen, and Lapata 2018) read the article
and get the representations of the sentences and article to select sentences. However, summaries generated by extractive
methods always suffer from redundancy problem. Recently,
with the emergence of neural network models for text generation, a vast majority of the literature on summarization
is dedicated to abstractive summarization (Bansal and Chen
2018; Ma et al. 2018b; Zhou et al. 2018). On the text summarization benchmark dataset CNN/DailyMail, the state-ofthe-art abstractive methods outperform the best extractive
method in terms of ROUGE score. Most methods for abstractive text summarization are based on the sequence-tosequence model (Sutskever, Vinyals, and Le 2014), which
encodes the source texts into the semantic representation
with an encoder, and generates the summaries from the representation with a decoder. To tackle the out-of-vocabulary
problem, some researchers employ the copy mechanism to
copy some words from the input document to summary (Gu
et al. 2016; See, Liu, and Manning 2017). To capture the
main aspect of document, Chen et al. (2018) propose to select salient sentences and then rewrite these sentences to a
concise summary. This approach achieves the state-of-theart of text summarization on CNN/DailyMail benchmark
dataset. Unlike document summarization that needs to encode a long text, social media summarization usually reads
short and noisy text and has become a popular task these
days. After Hu et al. (2015) propose a short text summarization dataset on social media and many researchers follow
this task. Lin et al. (2018) propose a seq2seq based model
which uses an CNN to refine the representation of source
context. Wang ef al. (2018) use convolutional seq2seq model
to summarize text and use the policy gradient algorithm to
directly optimize the ROUGE score. However, these summarization models do not utilize the reader’s comments in
generating summaries.

To consider the reader’s comments into text summarization, the reader-aware summarization is proposed and it
mainly takes the form of extractive approaches. Graph-based
method has been used for comment oriented summarization task such as (Hu, Sun, and Lim 2007; 2008), where
they identify three relations (topic, quotation, and mention) by which comments can be linked to one another.
Recently, Nguyen et al. (2016) publish a small extractive
sentence-comment dataset which can not be used to train
neural models due to its small size. Li et al. (2015) propose an unsupervised compressive multi-document summarization model using sparse coding method. Following previous work, there are some models (Li, Bing, and Lam 2017;
Li et al. 2017) using variational auto-encoder to model the
latent semantic of original article and reader comments. Different from our abstractive summarization task, these related
works are all based on extractive or compressive approaches.

Problem Formulation

Before presenting our approach for the reader-aware summarization, we first introduce our notations and key concepts.

To begin with, for a document X¢ = {xf,29,..., 04},
we assume there is a comment set X° = {c1,C2,...,cr¢}
where cj = {@{1,2j2,---,2j pe} is the i-th comment, ad

denotes the i-th word in document X%, and Li F denotes
the 7-th word in 7-th comment sentence c;. Given the document X%, the summary generator reads the comments X°,
then generates a summary Y = {@1, §,... , Y-+ }. Finally,

we use the difference between generated summary Y and
ground truth summary Y as the training signal to optimize
the model parameters.

The Proposed RASG Model
Overview

In this section, we propose our reader-aware summary generator, abbreviated as RASG. The overview of RASG is
shown in Figure | which can be split into four main parts:

e Summary generator is a seq2seq based architecture with
attention and copy mechanisms.

e Reader attention module learns a semantic alignment
between each word in document and comments, thus captures the reader focused aspect.

e Supervisor measures the semantic gap between decoder
focused aspect and reader focused aspect. There is also a discriminator which uses convolutional neural network to extract features and then distinguishes how similar is decoder
focused aspect to reader focused aspect.

e Goal tracker utilizes the semantic gap learned by supervisor and the features extracted learned by the discriminator to set a goal, which is further utilized as a more specific
guidance for summary generator to produce better summary.

Summary generator

At the beginning, we use an embedding matrix e to map onehot representation of each word in the document X@% and
comments X° to a high-dimensional vector space. We denote e(a) as the embedding representation of word x. From
these embedding representations, we employ a bi-directional
recurrent neural network (Bi-RNN) to model the temporal
interactions between words:

h? = Bi-RNNg(e(x?), h?_,), (1)

where h? denotes the hidden state of t-th step in Bi-RNN
for document X%. We denote the final hidden state hina of

Bi-RNN, as the vector representation of the document X%.
Following (See, Liu, and Manning 2017; Ma et al. 2018a),
we choose the long short-term memory (LSTM) as the BiRNN cell.

Then we apply a linear transform layer on the input document vector representation he, and use the output of this

layer as the initial state of decoder LSTM, shown in Equation 2. In order to reduce the burden of compressing document information into initial state so, we use the attention
mechanism (Bahdanau, Cho, and Bengio 2015) to summarize the input document into context vector {;_; dynamically and we will show the detail of these in the following
sections. We then concatenate the context vector f;—; with
the embedding of previous step output e(y;_1) and feed this
into decoder LSTM, shown in Equation 3. We use the notion
[:;-] as the concatenation of two vectors.

so = Wahtpa + ba, (2)
8, = LSTM (51-1, | fe-15 e(Ye-1)]) - (3)
At t-th decoding step, we use the decoder state s;_ 1 to attend
to each the document states h“ and resulting in the attention

distribution a, € R7*, shown in Equation 5. Then we use
the attention distribution a; to weighted sum the document
states as the context vector f+_1.

Oyj = W! tanh (Ws: + Wh?) , (4)
/ d !
ani =exp (ay,)/Djexr(a%j), ©)
d
fra = Dey oni’. (6)

Finally, an output projection layer is applied to get the final generating distribution P,, over vocabulary, as shown in
Equation 7. We concatenate goal vector g;, gap content d;,
and the output of decoder LSTM s; as the input of the output projection layer. The goal vector g; represents the goal
of current generation step, the gap content d, denotes the semantic gap between generated summary and reader focused
document and we will show the details of these variables in
the following sections.

P, = softmax (W,[s¢; gz; di] + bv) , (7)

In order to handle the out-of-vocabulary (OOV) problem, we
equip the pointer network (Gu et al. 2016; Vinyals, Fortunato, and Jaitly 2015; See, Liu, and Manning 2017) with our
decoder, which makes our decoder capable to copy words
from the source text. The design of the pointer network is
the same as the model used in (See, Liu, and Manning 2017),
thus we omit this procedure in our paper due to the limited
space. We use the negative log-likelihood as the loss function:

Ly = — oh log Py(y2). (8)

Denoising module

Due to the fact that reader comments are a kind of informal text, they may consist of many noisy information, and
not all the comments are helpful for generating better summaries. Consequently, we employ a denoising module to
distinguish which comments are helpful. First, we employ
an Bi-RNN, to model the comment word embeddings:

his — Bi-RNN. ( it—L) e(x; 4); (9)

where hj , denotes the hidden state of t-th word in 2-th comment c;. Next, we use average-pooling operation over these
(2) Reader Attention

es ee = = = Be Be eB ee ee ee ee ee ee ee ee ee EF SE =

Document Comment 1 '
Attention Attention
Attention Attention
Document Comment 3
Attention Attention

Comment 2

Comment 3

eo = = = = = = = = =

 

(3) Supervisor

  

(4) Goal Tracker

Figure 1: Overview of RASG. We divide our model into four parts: (1) Summary generator generates a summary to describe
the main aspect of document. (2) Reader attention module models the readers attention of document. (3) Supervisor models the
gap of focused document aspect between generated summary and reader comments. (4) Goal tracker sets a goal of summary

generator according to gap given by supervisor.

hidden states to produce a vector representation a; of 2-th
comment, shown in Equation 10. Finally, we apply a linear transform with sigmoid function to predict whether the
comment is useful, and the sigmoid output 6; € (0,1) also
can be seen as a salience score of 7-th comment given the
document representation hina.

ay = ave({hir, hi 2; fry hire), (10)

B; = sigmoid(W, [a;; h4a] + b:), (11)

To train the denoising module, we use the cross entropy loss
to supervise this procedure.

La = —}_, Bi log(4;). (12)

where 6; € {0,1} is the ground truth salience score of comments. 6; = 1 denotes the 2-th comment c; is helpful for
generating summary and vice-versa.

Reader attention modeling

To model the reader focused aspect, we first calculate the
word alignment of reader comments towards the document.
We use the embeddings of words in document and comments to calculate the semantic alignment score. Precisely,
i,j,k 18 the alignment socre between the 7-th document word
x? and the k-th word in the j-th comment © x» aS Shown in
Equation 13:

Yinjk = (2G) e(25,,,), (13)
Oi, — max({¥i,j,1, soe Vin, TeS)s (14)

In Equation 14, we use a max-operation over the alignment
i,j, to signify whether the 2-th word of document is focused
by the j-th comment. We regard the alignment score 0; ; as
the reader attention weight for the 7-th reader comment to
the 7-th document word.

In order to reduce the interference caused by the noisy

comments, we employ the comment salience score 8; obtained from the denoising module to weighted combine the
j-th reader attention 0; ,;, as shown in Equation 15. It means
that noisy comments will contribute less in the procedure of
reader attention modeling.

é; = yl 5,583, (15)
€; = exp («;) Dyn exp (<;) ; (16)

Finally, we get the reader attention €; € IR for i-th document
word after a softmax function as shown in Equation 16.

Supervisor

To model the semantic gap between the generated summary
and the reader focused aspects, we design a supervisor module. First, for the decoder, we need to know which aspect in
document has been focused by our summary generator in the
past decoding steps. We sum up the latest & attention distributions {a;, a4-1,..-, Q¢—441} and result in 4 € RT as
the focus distribution of generated summary over T@ document words, shown in Equation 17. Then we use 1 to
weighted sum the document hidden states h@ and result in
M4:

Vy, = 1/k 5 ots, (17)
_ wr? d
mt = irl M4 ins, (18)

where m+ represents the focused aspect by the latest k decoding steps, a.k.a., decoder focused aspect.

Next, we use the reader attention €. to weighted sum the
document hidden states h?:

w= Dye cihf, (19)
where u represents the reader focused aspect.

For encouraging the decoder focused aspect become similar to the reader focused aspect, we employ an CNN based
discriminator to signify the difference between the decoder
focused aspect m, and the reader focused aspect wu. Then
we can use this difference to guide the decoder focus on
the reader focused aspect. Typically, the discriminator is a
binary classifier which can be decomposed into a convolutional feature extractor / shown in Equation 20 and a sigmoid classification layer shown in Equation 21 and 22.

F(x) =relu(W. ® x), (20)
T," = sigmoid(W+F (mz) + bf), (21)
T" = sigmoid(W;yF(u) + bf), (22)

where © denotes the convolutional operation, trainable parameter W,. denotes the convolutional kernel, and 7;” and
T“ are both the classification probabilities.

Note that a token generated at time ¢ will influence not
only the gradient received at that time but also the gradient at
subsequent time steps. Intuitively, the decoding attention 14
of latter decoding step is more similar to the attention of final
summary than the earlier steps. Thus we propose to define
the cumulative loss with a discount factor y € (0, 1] as the
loss functions. Note that the training objective for discriminator can be interpreted as maximizing the log-likelihood
for classification, whether the input x in Equation 20 comes
from reader focused aspect or from decoder focused aspect.

d
LI =P yl ’—*(log r* + log(1—77")), (23)

d d
= Sy yp? —*(log(1 — 77”")). (24)
In order to model the gap between reader focused aspect
and decoder focused aspect, we subtract the reader atten
. d d . . . .
tione € R? by % € R? resulting in attention difference

Ce € RT, shown in Equation 25. Then we use the attention
difference ¢; to sum up the document hidden states h?:

ra
G=Ee-h, d= ist Crh? (25)
where d; denotes the semantic of unfocused document aspects by summary generator, a.k.a., gap content. To encourage the summary generator focus on the unfocused document aspects, we feed the gap content d; to the generator, as
shown in Equation 7.

Goal tracker

Since the discriminator only provides a scalar guiding signal 7;”" at each decoding step, it becomes relatively less in
formative when the sentence length T* goes larger. Inspired
by LeakGAN (Guo et al. 2018), the proposed RASG framework allows discriminator to provide additional information,
denoted as goal vector g;. In view of there is certain relationship between the goal of current decoding step and previous
steps, we need to model the temporal interactions between
the goal of each step. More specifically, we introduce a goal
tracker module, an LSTM that takes the extracted feature
vector F(m;) and gap content d; as its input at each step t
and outputs a goal vector g;:

ot = LSTM(g¢_1, |F (mz); d;|). (26)

In order to achieve higher consistency of reader focused aspect, we feed the goal vector g; into the generator to guide
the generation of the next word, as shown in Equation 7.

Model training

As our model is trained in an adversarial manner, we resplit the parameters in our model into two parts: (1) generation module including the parameters of summary generator,
reader attention module and goal tracker; (2) discriminator
module including the parameters of CNN classifier. As for
training generation module, we sum up the loss function of
denoising module £4, cross entropy between ground truth
£4, and the result of discriminator £2, as shown in Equation 27. We use the £ to optimize the parameters of generation module.

L=L,4+La+L%, (27)
Next, we train the discriminator module to maximize the
probability of assigning the correct label to both generated
aspect m, and reader focused aspect uw. More specifically, we
optimize the parameters of discriminator module according
to the loss function £¢ calculated in Equation 23.

Experimental Setup
Research questions

We list four research questions that guide the experiments:
RQ1: Does RASG outperform other baselines? RQ2: What
is the effect of each module in RASG? RQ3: Does RASG
capture useful information from noisy comments? RQ4:
Can goal tracker give a helpful guidance to decoder?

Dataset

We collect the document-summary-comments pair data
from Weibo which is the largest social network website in
China, and users can read a document and post a comment about the document on this website. Each sample of
data contains a document, a summary and several reader
comments. Most comments are about the readers’ opinion
of their focused aspect in the document. In order to train
the denoising module, we should give a ground truth label
(; for 7-th comment. When there is at least one common
word in summary and comment, we regard such comment
is helpful for generating summary. Accordingly, we give the
{; = 1 to 7-th comment when it contains at least one common word and give §; = O when it does not. In total, our
training dataset contains 863826 training samples. The average length of document is 67.08 words, average length of
comment is 16.61 words and average length of summary is
16.56 words. The average comments number of a document
is 9.11.

Evaluation metrics

For evaluation metrics, we adopt ROUGE score (Lin 2004)
which is widely applied for summarization evaluation (Sun
et al. 2018; Chen et al. 2018). The ROUGE metrics compare
generated summary with the reference summary by computing overlapping lexical units, including ROUGE-1 (unigram), ROUGE-2 (bi-gram) and ROUGE-L (longest common subsequence).
Table 2: Ablation models for comparison.

Acronym Gloss

RASG w/o DM — RASG w/o Denoising Module
RASG w/o G RASG w/o Gap content
RASG w/o GT — RASG w/o Goal Tracker

RASG w/o GTD RASG w/o Goal Tracker Discriminator
Table 3: ROUGE scores comparison between baselines.

ROUGE-1 ROUGE-2  ROUGE-L

S2S 23.86 9.86 23.83
S2SR 24.70 10.00 24.50
CGU 27.32 11.36 25.49
RASG 30.33 12.39 27.16
LEAD1 5.51 1.71 4.94

TextRank 13.5 4.55 11.46

Comparison methods

In order to prove the effectiveness of each module in RASG,
we conduct some ablation models introduced in Table 2.

To evaluate the performance of our proposed dataset and
model, we compare it with the following baselines:
(1) S2S: Sequence-to-sequence framework (Sutskever,
Vinyals, and Le 2014) has been proposed for language
generation task. (2) S2SR: We simply add the reader attention ¢€. on attention distribution a;,. in each decoding
step. (3) CGU: Lin et al. (2018) propose to use the convolutional gated unit to refine the source representation,
which achieves the state-of-the-art performance on social
media text summarization dataset. (4) LEAD1: LEAD1 is
a commonly used baseline (Nallapati, Zhai, and Zhou 2017;
See, Liu, and Manning 2017), which selects the first sentence of document as the summary. (5) TextRank: Mihalcea et al. (2004) propose to build a graph, then add each sentence as a vertex and use link to represent semantic similarity. Sentences are sorted based on final scores and a greedy
algorithm is employed to select summary sentences.

Implementation details

We implement our experiments in TensorFlow (Abadi et al.
2016) on an NVIDIA P40 GPU. The word embedding dimension is set to 256 and the number of hidden units is 512.
We set the & = 5 in the Equation 17 and » = 0.5 in Equation 23 and 24. We use Adagrad optimizer (Duchi, Hazan,
and Singer 2010) as our optimizing algorithm. We employ
beam search with beam size 5 to generate more fluency summary sentence.

Experimental Results
Overall performance

For research question RQ1, we examine the performance
of our model in terms of ROUGE. Table 3 lists performances of all comparisons in terms of ROUGE score. We
see that RASG achieves a 11.0%, 9.1% and 6.6% increment
over the state-of-the-art method CGU in terms of ROUGE-1,

Table 4: ROUGE scores of different ablation models.

ROUGE-1 ROUGE-2  ROUGE-L

RASG w/o DM 27.29 11.01 24.64
RASG w/o G 28.03 11.24 25.28
RASG w/o GT 22.75 B17 20.80
RASG w/o GTD 19.30 6.95 17.70

RASG 30.33 12.39 27.16

ROUGE-2 and ROUGE-L respectively. It is worth noticing
that the baseline model S2SR achieves better performance
than S2S which demonstrates the effectiveness of incorporating reader focused aspect in summary generation. However when compared with RASG, S2SR achieves lower performance in terms of all ROUGE score. Thus, simply adding
the reader focused aspect into generation procedure is not a
good reader-aware summarization method.

Ablation study

Next, we turn to research question RQ2. We conduct ablation tests on the usage of denoising module, supervisor
as well as the goal tracker and the ROUGE score result
is Shown in Table 4. The discriminator provides the scalar
training signal 22 for generator training and the feature vector F(m:+) for goal tracker. Consequently, there is an increment of 17.51% from RASG w/o GTD to RASG w/o
GT in terms of ROUGE-L, which demonstrates the effectiveness of discriminator. As for the effectiveness of goal
tracker, compared with RASG and RASG w/o GT, RASG
w/o GTD offers a decrease of 45.23% and 17.88% in terms
of ROUGE-1, respectively. This demonstrates that the goal
tracker with the feature from discriminator plays an important role in producing better summary. However, using the
goal tracker without the feature extracted by the discriminator does not help improve the performance of the summary generator, shown by the performance of RASG w/o
GTD. Finally, RASG w/o DM offers a decrease of 10.22%
compared with RASG in terms of ROUGE-L, which demonstrates the effectiveness of denoising module.

Denoising ability

Next, we turn to research question RQ3. Due to the fact that
the denoising module is learned in a supervised way, there
is a ground truth label associated with each comment. Thus
when the predict salience score B; > 0.5 we classify it as
a helpful comment and vice-versa. As the denoising module
can be regarded as a binary classifier to classify each comment to 6; = 1 or B; = (0, we calculate the classification
recall score of comments to measure the performance of this
module. The recall curve is shown in Figure 2. As the training progresses, the recall score is on a steady upward curve
which proves the improved performance of denoising module. To conclude, the denoising module can give a meaningful salience score for the subsequent process.
 

 

0.00003

0.98025

 

 

 

 

 

0.00004

 

0 10000 20000 30000 40000 50000 60000
training step training step

(a) (b)

 

Figure 2: (a) Cosine distance between decoding attention
and reader attention. (b) Recall score of denoising module.

Table 5: Consistency and fluency comparison by human
evaluation.

Fluency Consistency
mean variance mean variance

S2S 2.17 0.24 1.98 0.28
CGU 2.20) 0.26 2.08 0.29
RASG 2.65“ 0.21 2.48“ 0.26

Analysis of goal tracker

In this section, we turn to research question RQ4. The main
purpose of employing goal tracker is to help the summary
generator utilize the reader focused aspect. Intuitively, we
want to know whether the summary generator follows the
goal set by the goal tracker. Therefore, we calculate the co
. . . d
sine distance between decoder attention vy € R? (in

Equation 17) and reader attention € € RT (in Equation 16).
In Figure 2, we compare the cosine distance between the ablation model RASG w/o GTD and RASG. RASG observes
a decrease of cosine distance and conversely, the RASG w/o
GTD observes an increment of cosine distance. The fact
that RASG can narrow the cosine distance proves that goal
tracker and discriminator can lead the generator to follow
the reader focused aspect.

Human evaluation

We ask three highly-educated Ph.D. students to rate 100 generated summaries of different models according to consistency and fluency. These annotators are all native speakers.
The rating score ranges from | to 3 and 3 is the best. We
take the average score of all summaries as the final score of
each model, as shown in Table 5. It can be seen that RASG
outperforms other baseline models in both sentence fluency
and consistency by a large margin. We calculate the kappa
statistics in terms of fluency and consistency, and the score is
0.33 and 0.29 respectively. To prove the significance of the
above results, we also do the paired student t-test between
our model and CGU model (row with shaded background),
the p-value are 0.0017 and 0.0012 for fluency and consistency respectively.

Case analysis

Figure 3 shows a document and its corresponding summaries generated by different methods. We can observe that

 

 

 

 

ay

GRR ALAS, “PRD fee ORF re PN HS SCPE MES A BEAN at
ASG RRP lh, Ses ER PA EY AY _E TS AE BR

i Ze Br AK AT BIE. FPA RA Bill
Salt, SAMARAS BRUMEA S - EMR il
{(Lin Xu said that the Central Network Office will provide policy
support to establish a nationwide capital to enter the cultivation

 

 

document

 

 

\Q

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

of internet companies, improve the policies of domestic listing of
internet companies; through the press on the news website to issue
a press card, carry out education and training for practitioners, and
strive to create new the national team and the main force of the
media platform. See Long Weibo for details.)

El Ay RAND ZL J A(State-owned capital must be involved.)

RA fg) NSE Ta SE LE, BSE AUT | (The

Central Network Office should not implement the measures on the

 

 

 

 

 

 

 

 

 

 

 

 

 

 

comments ’ : ‘
documents and must implement them in a practical way !)

Be it 45 A EI A Ak Le SZ ST (I feel that the Central Network Office should cure these black sheep.)
fa BEE: ELSE A AAT A BOK PB
(Deputy director of the Central Network Office: Establishing
state-owned capital to cultivate internet enterprises)

 

 

 

 

 

 

 

 

 

 

 

reference

 

 

 

 

 

 

 

 

 

S2S Rie: ST STRAP ac BA A AC BA(Lin Xu : National team and national team working hard to build a new media
platform)

CGU Te | PR PA ig PF be GE BR St FE I ES A BE

 

 

 

 

 

 

 

 

 

 

7X(Long Weibo: The Central Network Office will provide policy
support to establish state-owned capital.)

RASG PEI: SFT eR RAE B A ABA (Central Network

Office: Working hard to build a national team of new media plat
 

 

 

 

 

 

 

 

form.)

Figure 3: Examples of the generated summary by RASG and
other models.

S2S does generate fluent summary. However, the generated
aspect is contradictory to the focused aspect of reader or
ground truth summary. Meanwhile, RASG overcomes this
shortcoming by using goal vector and gap content given by
goal tracker and supervisor at training stage, and produces
the summary that is not only fluent but also consistent with
main aspect of document.

Conclusion

In this paper, we propose a new framework named readeraware summary generator (RASG) which aims to generate
summaries for document from social media incorporating
the reader comments. In order to capture the reader focused
aspect, we design a reader attention component with a denoising module to capture the alignment between comments
and document. We employ a supervisor to measure the semantic gap between generated summary and reader focused
aspect. A goal tracker uses the information of semantic gap
and the feature extracted by the discriminator to produce a
goal vector to guide the summary generator. In our experiments, we have demonstrated the effectiveness of RASG
and have found significant improvements over state-of-theart baselines in terms of ROUGE and human evaluations.
Moreover, we have verified the effectiveness of each module
in RASG for improving the summarization performance.
Acknowledgments

We would like to thank the anonymous reviewers for their
constructive comments. We would also like to thank Zhujun Zhang, Sicong Jiang for their helps on this project.
This work was supported by the National Key Research and
Development Program of China (No. 2017YFC0804001),
the National Science Foundation of China (NSFC No.
61876196, No. 61672058), Alibaba Innovative Research
(AIR) Fund. Rui Yan was sponsored by CCF-Tencent Open
Research Fund and Microsoft Research Asia (MSRA) Collaborative Research Program.

References

Abadi, M.; Barham, P.; Chen, J.; Chen, Z.; Davis, A.; Dean,
J.; Devin, M.; Ghemawat, S.; Irving, G.; Isard, M.; et al.
2016. Tensorflow: a system for large-scale machine learning. In OSDI, volume 16, 265-283.

Bahdanau, D.; Cho, K.; and Bengio, Y. 2015. Neural machine translation by jointly learning to align and translate. In
ICLR.

Bansal, M., and Chen, Y.-C. 2018. Fast abstractive summarization with reinforce-selected sentence rewriting. In ACL.
Chen, X.; Gao, S.; Tao, C.; Song, Y.; Zhao, D.; and Yan, R.
2018. Iterative document representation learning towards
summarization with polishing. In EMNLP, 4088-4097.
Chopra, S.; Auli, M.; and Rush, A. M. 2016. Abstractive
sentence summarization with attentive recurrent neural networks. In HLT-NAACL.

Duchi, J. C.; Hazan, E.; and Singer, Y. 2010. Adaptive
subgradient methods for online learning and stochastic optimization. JMLR 12:2121-2159.

Gao, S.; Ren, Z.; Zhao, Y. E.; Zhao, D.; Yin, D.; and Yan,
R. 2019. Product-aware answer generation in e-commerce
question-answering. In WSDM.

Gu, J.; Lu, Z.; Li, H.; and Li, V. O. K. 2016. Incorporating copying mechanism in sequence-to-sequence learning.
CoRR abs/1603.06393.

Guo, J.; Lu, S.; Cai, H.; Zhang, W.; Yu, Y.; and Wang, J.
2018. Long text generation via adversarial training with
leaked information. CoRR abs/1709.08624.

Hu, B.; Chen, Q.; and Zhu, F. 2015. Lests: A large scale
chinese short text summarization dataset. In EMNLP.

Hu, M.; Sun, A.; and Lim, E.-P. 2007. Comments-oriented
blog summarization by sentence extraction. In CIKM.

Hu, M.; Sun, A.; and Lim, E.-P. 2008. Comments-oriented
document summarization: understanding documents with
readers’ feedback. In SJGIR.

Jadhav, A., and Rajan, V. 2018. Extractive summarization
with swap-net: Sentences and words from alternating pointer
networks. In ACL.

Li, P.; Bing, L.; Lam, W.; Li, H.; and Liao, Y. 2015. Readeraware multi-document summarization via sparse coding. In
IJCAT,

Li, P.; Wang, Z.; Lam, W.; Ren, Z.; and Bing, L. 2017.
Salience estimation via variational auto-encoders for multidocument summarization. In AAAI.

Li, P.; Bing, L.; and Lam, W. 2017. Reader-aware multidocument summarization: An enhanced model and the first
dataset. In Proceedings of the Workshop on New Frontiers
in Summarization, 91-99.

Lin, J.; Sun, X.; Ma, S.; and Su, Q. 2018. Global encoding
for abstractive summarization. In ACL.

Lin, C.-Y. 2004. Rouge: A package for automatic evaluation
of summaries. 7ext Summarization Branches Out.

Ma, S.; Sun, X.; Lin, J.; and Ren, X. 2018a. A hierarchical
end-to-end model for jointly improving text summarization
and sentiment classification. In L/CAI.

Ma, S.; Sun, X.; Lin, J.; and Wang, H. 2018b. Autoencoder as assistant supervisor: Improving text representation
for chinese social media text summarization. In ACL.
Mihalcea, R., and Tarau, P. 2004. Textrank: Bringing order
into text. In EMNLP.

Nallapati, R.; Zhai, F.; and Zhou, B. 2017. Summarunner: A
recurrent neural network based sequence model for extractive summarization of documents. In AAAI.

Narayan, S.; Cohen, S. B.; and Lapata, M. 2018. Ranking
sentences for extractive summarization with reinforcement
learning. In NAACL-ALT.

Nguyen, M.-T.; Tran, C.-X.; Tran, D.-V.; and Nguyen, M.L. 2016. Solscsum: A linked sentence-comment dataset for
social context summarization. In CIKM.

See, A.; Liu, P. J.; and Manning, C. D. 2017. Get to
the point: Summarization with pointer-generator networks.
arXiv preprint arXiv: 1704.04368.

Sun, M.; Hsu, W. T.; Lin, C.-K.; Lee, M.-Y.; Min, K.; and
Tang, J. 2018. A unified model for extractive and abstractive
summarization using inconsistency loss. In ACL.

Sutskever, I.; Vinyals, O.; and Le, Q. V. 2014. Sequence to
sequence learning with neural networks. In NIPS.

Tao, C.; Gao, S.; Shang, M.; Wu, W. C.; Zhao, D.; and Yan,
R. 2018. Get the point of my utterance! learning towards
effective responses with multi-head attention mechanism. In
IJCAI.

Vinyals, O.; Fortunato, M.; and Jaitly, N. 2015. Pointer
networks. In NIJPS, 2692—2700.

Wang, L.; Yao, J.; Tao, Y.; Zhong, L.; Liu, W.; and Du, Q.
2018. A reinforced topic-aware convolutional sequence-tosequence model for abstractive text summarization. In /JCAI.

Yang, Z.; Cai, K.; Tang, J.; Zhang, L.; Su, Z.; and Li, J.-Z.
2011. Social context summarization. In SJGIR.

Zhou, Q.; Yang, N.; Wei, F.; and Zhou, M. 2017. Selective
encoding for abstractive sentence summarization. In ACL.
Zhou, Q.; Yang, N.; Wei, F.; and Zhou, M. 2018. Sequential
copying networks. In AAAI.
