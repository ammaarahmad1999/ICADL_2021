1611.01603v6 [cs.CL] 21 Jun 2018

ar X1V

Published as a conference paper at ICLR 2017

 

BI-DIRECTIONAL ATTENTION FLOW
FOR MACHINE COMPREHENSION

Minjoon Seo!* —Aniruddha Kembhavi? Ali Farhadi?? Hananneh Hajishirzi*
University of Washington', Allen Institute for Artificial Intelligence?
{minjoon, ali, hannaneh}@cs.washington.edu, {anik}@allenai.org

ABSTRACT

Machine comprehension (MC), answering a query about a given context paragraph, requires modeling complex interactions between the context and the query.
Recently, attention mechanisms have been successfully extended to MC. Typically these methods use attention to focus on a small portion of the context and summarize it with a fixed-size vector, couple attentions temporally,
and/or often form a uni-directional attention. In this paper we introduce the
Bi-Directional Attention Flow (BIDAF) network, a multi-stage hierarchical process that represents the context at different levels of granularity and uses bidirectional attention flow mechanism to obtain a query-aware context representation without early summarization. Our experimental evaluations show that
our model achieves the state-of-the-art results in Stanford Question Answering
Dataset (SQuAD) and CNN/DailyMail cloze test.

1 INTRODUCTION

The tasks of machine comprehension (MC) and question answering (QA) have gained significant
popularity over the past few years within the natural language processing and computer vision communities. Systems trained end-to-end now achieve promising results on a variety of tasks in the text
and image domains. One of the key factors to the advancement has been the use of neural attention
mechanism, which enables the system to focus on a targeted area within a context paragraph (for
MC) or within an image (for Visual QA), that is most relevant to answer the question
(2016a). Attention mechanisms in previous works typically
have one or more of the following characteristics. First, the computed attention weights are often
used to extract the most relevant information from the context for answering the question by summarizing the context into a fixed-size vector. Second, in the text domain, they are often temporally
dynamic, whereby the attention weights at the current time step are a function of the attended vector
at the previous time step. Third, they are usually uni-directional, wherein the query attends on the
context paragraph or the image.

In this paper, we introduce the Bi-Directional Attention Flow (BIDAF) network, a hierarchical
multi-stage architecture for modeling the representations of the context paragraph at different levels
of granularity (Figure[I). BIDAF includes character-level, word-level, and contextual embeddings,
and uses bi-directional attention flow to obtain a query-aware context representation. Our attention
mechanism offers following improvements to the previously popular attention paradigms. First, our
attention layer is not used to summarize the context paragraph into a fixed-size vector. Instead, the
attention is computed for every time step, and the attended vector at each time step, along with the
representations from previous layers, is allowed to flow through to the subsequent modeling layer.
This reduces the information loss caused by early summarization. Second, we use a memory-less
attention mechanism. That is, while we iteratively compute attention through time as in |[Bahdanau|
(2015), the attention at each time step is a function of only the query and the context paragraph at the current time step and does not directly depend on the attention at the previous time step.
We hypothesize that this simplification leads to the division of labor between the attention layer
and the modeling layer. It forces the attention layer to focus on learning the attention between the
query and the context, and enables the modeling layer to focus on learning the interaction within the

 

“The majority of the work was done while the author was interning at the Allen Institute for AI.
Published as a conference paper at ICLR 2017

 

  

 

Start End Query2Context
| satin)
Output Layer ae
STITT
=lelotletlgllails Us
TT
ModelingLayer | Ff Rf mmm
Context2Query
Attention Flow Ah A ‘
Layer JU
J
Uy Uy is
Contextual = u,
Embed Layer [|
Word Embed —
Layer CJ
Character Word Character
Embed Layer C4 C4 Embedding Embedding
O1 qu —
Context Query |

 

Figure 1: BiDirectional Attention Flow Model (best viewed in color)

query-aware context representation (the output of the attention layer). It also allows the attention
at each time step to be unaffected from incorrect attendances at previous time steps. Our experiments show that memory-less attention gives a clear advantage over dynamic attention. Third, we
use attention mechanisms in both directions, query-to-context and context-to-query, which provide
complimentary information to each other.

Our BIDAF model] outperforms all previous approaches on the highly-competitive Stanford Question Answering Dataset (SQuAD) test set leaderboard at the time of submission. With a modification
to only the output layer, BIDAF achieves the state-of-the-art results on the CNN/DailyMail cloze
test. We also provide an in-depth ablation study of our model on the SQUAD development set, visualize the intermediate feature spaces in our model, and analyse its performance as compared to a

more traditional language model for machine comprehension (Rajpurkar et al.}/2016).

2 MODEL

Our machine comprehension model is a hierarchical multi-stage process and consists of six layers
(Figure[I):
1. Character Embedding Layer maps each word to a vector space using character-level
CNNs.

2. Word Embedding Layer maps each word to a vector space using a pre-trained word embedding model.

3. Contextual Embedding Layer utilizes contextual cues from surrounding words to refine
the embedding of the words. These first three layers are applied to both the query and
context.

4. Attention Flow Layer couples the query and context vectors and produces a set of queryaware feature vectors for each word in the context.

5. Modeling Layer employs a Recurrent Neural Network to scan the context.

6. Output Layer provides an answer to the query.

‘Our code and interactive demo are available at: allenai.github.io/bi-att-—flow/
Published as a conference paper at ICLR 2017

 

1. Character Embedding Layer. Character embedding layer is responsible for mapping each
word to a high-dimensional vector space. Let {a1,...x7} and {qi,...q } represent the words in
the input context paragraph and query, respectively. Following/Kim|(2014), we obtain the characterlevel embedding of each word using Convolutional Neural Networks (CNN). Characters are embedded into vectors, which can be considered as 1D inputs to the CNN, and whose size is the input
channel size of the CNN. The outputs of the CNN are max-pooled over the entire width to obtain a
fixed-size vector for each word.

2. Word Embedding Layer. Word embedding layer also maps each word to a high-dimensional
vector space. We use pre-trained word vectors, GloVe (Pennington et al.|!2014), to obtain the fixed

word embedding of each word.

The concatenation of the character and word embedding vectors is passed to a two-layer Highway
Network 2015). The outputs of the Highway Network are two sequences of ddimensional vectors, or more conveniently, two matrices: X € R?** for the context and Qe R?¢x4
for the query.

3. Contextual Embedding Layer. We use a Long Short-Term Memory Network
(LSTM) on top of the embeddings provided by the previous
layers to model the temporal interactions between words. We place an LSTM in both directions, and
concatenate the outputs of the two LSTMs. Hence we obtain H € R?¢** from the context word
vectors X, and U € R?2*/ from query word vectors Q. Note that each column vector of H and U
is 2d-dimensional because of the concatenation of the outputs of the forward and backward LSTMs,
each with d-dimensional output.

It is worth noting that the first three layers of the model are computing features from the query and
context at different levels of granularity, akin to the multi-stage feature computation of convolutional
neural networks in the computer vision field.

4. Attention Flow Layer. Attention flow layer is responsible for linking and fusing information
from the context and the query words. Unlike previously popular attention mechanisms
22015} Fillet al 2016) Sordoni et al. [2016] Shen et a.|[2016), the attention flow layer is not
used to summarize the query and context into single feature vectors. Instead, the attention vector at
each time step, along with the embeddings from previous layers, are allowed to flow through to the
subsequent modeling layer. This reduces the information loss caused by early summarization.

The inputs to the layer are contextual vector representations of the context H and the query U. The
outputs of the layer are the query-aware vector representations of the context words, G, along with
the contextual embeddings from the previous layer.

In this layer, we compute attentions in two directions: from context to query as well as from query to
context. Both of these attentions, which will be discussed below, are derived from a shared similarity
matrix, S € R’*/, between the contextual embeddings of the context (H) and the query (U), where
Sz; indicates the similarity between ¢-th context word and j-th query word. The similarity matrix is
computed by

Sj = a(H.;, U,;) ER (1)
where qa is a trainable scalar function that encodes the similarity between its two input vectors, H., is
t-th column vector of H, and U,, is j-th column vector of U, We choose a(h, u) = Ws) [h;u;ho
uj, where wis) € R°? is a trainable weight vector, o is elementwise multiplication, [;] is vector

concatenation across row, and implicit multiplication is matrix multiplication. Now we use S to
obtain the attentions and the attended vectors in both directions.

Context-to-query Attention. Context-to-query (C2Q) attention signifies which query words are
most relevant to each context word. Let a; € R’ represent the attention weights on the query words
by t-th context word, } | a;; = 1 for all t. The attention weight is computed by a; = softmax(S;.) €
IR’, and subsequently each attended query vector is Uy = > j aty U,;. Hence Uisa 2d-by-T' matrix
containing the attended query vectors for the entire context.

Query-to-context Attention. Query-to-context (Q2C) attention signifies which context words
have the closest similarity to one of the query words and are hence critical for answering the query.
Published as a conference paper at ICLR 2017

 

We obtain the attention weights on the context words by b = softmax(max,,;(S)) € R?, where
the maximum function (max,,;) 1s performed across the column. Then the attended context vector

ish = >_, biHx € R2¢, This vector indicates the weighted sum of the most important words in the

context with respect to the query. h is tiled T times across the column, thus giving H € R24xT.

Finally, the contextual embeddings and the attention vectors are combined together to yield G,
where each column vector can be considered as the query-aware representation of each context
word. We define G by a

G.. = BCH, Ur, Hs) € R°S (2)
where G., is the ¢-th column vector (corresponding to ¢-th context word), @ is a trainable vector
function that fuses its (three) input vectors, and dq is the output dimension of the @ function.
While the @ function can be an arbitrary trainable neural network, such as multi-layer perceptron, a
simple concatenation as following still shows good performance in our experiments: G(h, U, h) =
[h; 0; ho a; ho hj € R87 (ie., dg = 8d).

5. Modeling Layer. The input to the modeling layer is G, which encodes the query-aware representations of context words. The output of the modeling layer captures the interaction among
the context words conditioned on the query. This is different from the contextual embedding layer,
which captures the interaction among context words independent of the query. We use two layers
of bi-directional LSTM, with the output size of d for each direction. Hence we obtain a matrix
M ¢€ R22", which is passed onto the output layer to predict the answer. Each column vector of
M is expected to contain contextual information about the word with respect to the entire context
paragraph and the query.

6. Output Layer. The output layer is application-specific. The modular nature of BIDAF allows
us to easily swap out the output layer based on the task, with the rest of the architecture remaining
exactly the same. Here, we describe the output layer for the QA task. In section |5| we use a slight
modification of this output layer for cloze-style comprehension.

The QA task requires the model to find a sub-phrase of the paragraph to answer the query. The
phrase is derived by predicting the start and the end indices of the phrase in the paragraph. We
obtain the probability distribution of the start index over the entire paragraph by

p= softmax(w (1) |G; M]), (3)

where W(p1) © R!° is a trainable weight vector. For the end index of the answer phrase, we pass

M to another bidirectional LSTM layer and obtain M? € R?¢*7, Then we use M? to obtain the
probability distribution of the end index in a similar manner:

p’? = softmax(w (,2) [G; M’]) (4)

Training. We define the training loss (to be minimized) as the sum of the negative log probabilities
of the true start and end indices by the predicted distributions, averaged over all examples:

1
L(@) = "iV >_ log (py) + log(py2) (5)

where 6 is the set of all trainable weights in the model (the weights and biases of CNN filters and
LSTM cells, wg), W(p1) and w,p2)), NV is the number of examples in the dataset, y; and y? are the
true start and end indices of the 7-th example, respectively, and p; indicates the k-th value of the
vector p.

Test. The answer span (k,/) where & < 1 with the maximum value of p;p? is chosen, which can be
computed in linear time with dynamic programming.

3. RELATED WORK

Machine comprehension. A significant contributor to the advancement of MC models has been

the availability of large datasets. Early datasets such as MCTest (Richardson et al.}|2013) were too
Published as a conference paper at ICLR 2017

 

small to train end-to-end neural models. Massive cloze test datasets (CNN/DailyMail by [Hermann]
and Childrens Book Test by (2016)), enabled the application of deep neural
architectures to this task. More recently, released the Stanford Question
Answering (SQuAD) dataset with over 100,000 questions. We evaluate the performance of our
comprehension system on both SQUAD and CNN/DailyMail datasets.

Previous works in end-to-end machine comprehension use attention mechanisms in three distinct

ways. The first group (largely inspired by|Bahdanau et al.|(2015)) uses a dynamic attention mech
anism, in which the attention weights are updated dynamically given the query and the context as

well as the previous attention. (2015) argue that the dynamic attention model per
forms better than using a single fixed query vector to attend on context words on CNN & DailyMail
datasets. show that simply using bilinear term for computing the attention weights
in the same model drastically improves the accuracy. reverse the direction of
the attention (attending on query words as the context RNN progresses) for SQUAD. In contrast to
these models, BIDAF uses a memory-less attention mechanism.

The second group computes the attention weights once, which are then fed into an output layer for
final prediction (e.g., (2016)). Attention-over-attention model (Cui et al. uses
a 2D similarity matrix between the query and context words (similar to Equation |1) to compute
the weighted average of query-to-context attention. In contrast to these models, BIDAF does not
summarize the two modalities in the attention layer and instead lets the attention vectors flow into
the modeling (RNN) layer.

The third group (considered as variants of Memory Network 2015)) repeats comput
ing an attention vector between the query and the context through multiple layers, typically referred
to as multi-hop 2016). combine Memory
Networks with Reinforcement Learning in order to dynamically control the number of hops. One
can also extend our BIDAF model to incorporate multiple hops.

Visual question answering. The task of question answering has also gained a lot of interest in the
computer vision community. Early works on visual question answering (VQA) involved encoding
the question using an RNN, encoding the image using a CNN and combining them to answer the
question (2015). Attention mechanisms have also been successfully employed for the VQA task and can be broadly clustered based on the granularity of their
attention and the approach to construct the attention matrix. At the coarse level of granularity, the
question attends to different patches in the image (Zhu et al.|/2016}|Xiong et al.|/2016a). At a finer
level, each question word attends to each image patch and the highest attention value for each spatial
location is adopted. A hybrid approach is to combine questions representations at multiple levels of granularity (unigrams, bigrams, trigrams) 2015). Several
approaches to constructing the attention matrix have been used including element-wise product,

element-wise sum, concatenation and Multimodal Compact Bilinear Pooling (Fukui et al.|/2016).

(2016) have recently shown that in addition to attending from the question to image patches,
attending from the image back to the question words provides an improvement on the VQA task.
This finding in the visual domain is consistent with our finding in the language domain, where
our bi-directional attention between the query and context provides improved results. Their model,
however, uses the attention weights directly in the output layer and does not take advantage of the
attention flow to the modeling layer.

4 QUESTION ANSWERING EXPERIMENTS

In this section, we evaluate our model on the task of question answering using the recently released

SQuAD (Rajpurkar et al.|/2016), which has gained a huge attention over a few months. In the next

section, we evaluate our model on the task of cloze-style reading comprehension.

Dataset. SQuAD is a machine comprehension dataset on a large set of Wikipedia articles, with
more than 100,000 questions. The answer to each question is always a span in the context. The
model is given a credit if its answer matches one of the human written answers. Two metrics are
used to evaluate models: Exact Match (EM) and a softer metric, Fl score, which measures the
weighted average of the precision and recall rate at character level. The dataset consists of 90k/10k
Published as a conference paper at ICLR 2017

 

Single Model Ensemble

 

 

 

EM Fl EM Flo EM OFFAL SC
Logistic Regression Baseline® 40.4 51.0 - - - Nochar embedding 65.0 75.4
Dynamic Chunk Reader? 62.5 71.0 - - No word embedding 55.5 66.8
Fine-Grained Gating® 62.5 73.3 - - No C2Q attention 57.2. 67.7
Match-LSTM? 64.7 73.7 67.9 77.0 No Q2C attention 63.6 73.7
Multi-Perspective Matching® 65.5 75.1 68.2 77.2 Dynamic attention 63.5 73.6
Dynamic Coattention Networks’ 66.2 75.9 71.6 80.4 — BIDAF (single) 67.7 77.3
R-Net? 68.4 77.5 72.1 79.7 _BIDAF (ensemble) 72.6 80.7
BIDAF (Ours) 68.0 77.3 73.3 81.1

(b) Ablations on the SQUAD dev set
(a) Results on the SQuAD test set

la) The performance of our model BIDAF and competing approaches by|Rajpurkar et al.|
Yu et al.|(2016)°, |Yang et al.|(2016)°, [Wang & Jiang|(2016), IBM Watson® (unpublished),
Xiong et al.|(2016b)7, and Microsoft Research Asia? (unpublished) on the SQuAD test set. A
concurrent work by (2016) does not report the test scores. All results shown here reflect the
SQuAD leaderboard (st anford-qa.com) as of 6 Dec 2016, 12pm PST. The performance
of our model and its ablations on the SQUAD dev set. Ablation results are presented only for single
runs.

    
   
 

 

 

   
   
 

   

train/dev question-context tuples with a large hidden test set. It is one of the largest available MC
datasets with human-written questions and serves as a great test bed for our model.

Model Details. The model architecture used for this task is depicted in Figure[]] Each paragraph
and question are tokenized by a regular-expression-based word tokenizer (PTB Tokenizer) and fed
into the model. We use 100 1D filters for CNN char embedding, each with a width of 5. The
hidden state size (d) of the model is 100. The model has about 2.6 million parameters. We use the
AdaDelta 2012) optimizer, with a minibatch size of 60 and an initial learning rate of 0.5, for
12 epochs. A dropout (Srivastava et al. rate of 0.2 is used for the CNN, all LSTM layers, and
the linear transformation before the softmax for the answers. During training, the moving averages
of all weights of the model are maintained with the exponential decay rate of 0.999. At test time, the
moving averages instead of the raw weights are used. The training process takes roughly 20 hours
on a single Titan X GPU. We also train an ensemble model consisting of 12 training runs with the
identical architecture and hyper-parameters. At test time, we choose the answer with the highest
sum of confidence scores amongst the 12 runs for each question.

Results. The results of our model and competing approaches on the hidden test are summarized in
Table[Ial BIDAF (ensemble) achieves an EM score of 73.3 and an F1 score of 81.1, outperforming
all previous approaches.

Ablations. Table|1b|shows the performance of our model and its ablations on the SQUAD dev
set. Both char-level and word-level embeddings contribute towards the model’s performance. We
conjecture that word-level embedding is better at representing the semantics of each word as a whole,
while char-level embedding can better handle out-of-vocab (OOV) or rare words. To evaluate bidirectional attention, we remove C2Q and Q2C attentions. For ablating C2Q attention, we replace
the attended question vector U with the average of the output vectors of the question’s contextual
embedding layer (LSTM). C2Q attention proves to be critical with a drop of more than 10 points on
both metrics. For ablating Q2C attention, the output of the attention layer, G, does not include terms
that have the attended Q2C vectors, H. To evaluate the attention flow, we study a dynamic attention
model, where the attention is dynamically computed within the modeling layer’s LSTM, following
previous work (2016). This is in contrast with our approach,
where the attention is pre-computed before flowing to the modeling layer. Despite being a simpler
attention mechanism, our proposed static attention outperforms the dynamically computed attention
by more than 3 points. We conjecture that separating out the attention layer results in a richer set of
features computed in the first 4 layers which are then incorporated by the modeling layer. We also
show the performance of BIDAF with several different definitions of a and G functions (Equation|1]

and|2) in Appendix|[B]
Published as a conference paper at ICLR 2017

 

 

 

 

 

Layer Query Closest words in the Context using cosine similarity

Word When when, When, After, after, He, he, But, but, before, Before

Contextual When When, when, 1945, 1991, 1971, 1967, 1990, 1972, 1965, 1953

Word Where Where, where, It, IT, it, they, They, that, That, city

Contextual Where where, Where, Rotterdam, area, Nearby, location, outside, Area, across, locations

Word Who Who, who, He, he, had, have, she, She, They, they

Contextual Who who, whose, whom, Guiscard, person, John, Thomas, families, Elway, Louis

Word city City, city, town, Town, Capital, capital, district, cities, province, Downtown

Contextual city city, City, Angeles, Paris, Prague, Chicago, Port, Pittsburgh, London, Manhattan

Word January July, December, June, October, January, September, February, April, November, March
Contextual January January, March, December, August, December, July, July, July, March, December
Word Seahawks Seahawks, Broncos, 49ers, Ravens, Chargers, Steelers, quarterback, Vikings, Colts, NFL
Contextual Seahawks Seahawks, Broncos, Panthers, Vikings, Packers, Ravens, Patriots, Falcons, Steelers, Chargers
Word date date, dates, until, Until, June, July, Year, year, December, deadline

Contextual date date, dates, December, July, January, October, June, November, March, February

Table 2: Closest context words to a given query word, using a cosine similarity metric computed in the Word
Embedding feature space and the Phrase Embedding feature space.

 

 

 

 

 

 

 

 

 

 

 

 

 

 

    
   

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

15 Word Embed Space 15, Phrase Embed Space Questions answered correctly by our BIDAF model Soe
and the more traditional baseline model
T what (4753)May
-~20 how (1090)5 from 28 January to 2
who (1061)ay may 0 but by September had beén
5 25 debut on May 5 , when (696) 7
w
o -5 Opening in May 1852 at which (454)
a -10 509 3734 3585 in (444)
WwW _30
0 -15 where (433)- 5
Januar of these may be more
effect and may result in why (151)- :
-20
—35 September ly the state may not aid
on (44)—
August -25 :
Baseline
to (43)
—40 1 1 1 1 1 1 -30 1 1 1 L 1 L L L : -10 -5 0 5 10 15 20 25 ~ 24 26 28 30 32 34 36 38 40 42 BiDAF

t-SNE Dimension 1 t-SNE Dimension 1

(a) (b) (c)

Figure 2: (a) t-SNE visualizations of the months names embedded in the two feature spaces. The contextual
embedding layer is able to distinguish the two usages of the word May using context from the surrounding text.
(b) Venn diagram of the questions answered correctly by our model and the more traditional baseline
fet al.|/2016). (c) Correctly answered questions broken down by the 10 most frequent first words in the question.

Visualizations. We now provide a qualitative analysis of our model on the SQUAD dev set. First,
we visualize the feature spaces after the word and contextual embedding layers. These two layers
are responsible for aligning the embeddings between the query and context words which are the
inputs to the subsequent attention layer. To visualize the embeddings, we choose a few frequent
query words in the dev data and look at the context words that have the highest cosine similarity to
the query words (Table (2). At the word embedding layer, query words such as When, Where and
Who are not well aligned to possible answers in the context, but this dramatically changes in the
contextual embedding layer which has access to context from surrounding words and is just | layer
below the attention layer. When begins to match years, Where matches locations, and Who matches
names.

We also visualize these two feature spaces using t-SNE in Figure [2| t-SNE is performed on a large
fraction of dev data but we only plot data points corresponding to the months of the year. An
interesting pattern emerges in the Word space, where May is separated from the rest of the months
because May has multiple meanings in the English language. The contextual embedding layer uses
contextual cues from surrounding words and is able to separate the usages of the word May. Finally
we visualize the attention matrices for some question-context tuples in the dev data in Figure [3] In
the first example, Where matches locations and in the second example, many matches quantities and
numerical symbols. Also, entities in the question typically attend to the same entities in the context,
thus providing a feature for the model to localize possible answers.

Discussions. We analyse the performance of our our model with a traditional language-feature
based baseline (Rajpurkar et al.}|2016). Figure [2b shows a Venn diagram of the dev set questions

correctly answered by the models. Our model is able to answer more than 86% of the questions
Published as a conference paper at ICLR 2017

 

Super Bowl 50 was an American football game . Lo.
to determine the champion of the National Where | | \] | {| Whe | | | | | I | | at, the, at, Stadium, Levi, in, Santa, Ana
Football League ( NFL) for the 2015 season. |
The American Football Conference ( AFC ) did | | []

champion Denver Broncos defeated the

National Football Conference ( NFC ) champion Super | | | | |
Carolina Panthers 24-10 to earn their third

Super Bow! title. The game was played on Bowl | | | | | Bowl, Bowl, Bowl, Bowl, Bowl

Super, Super, Super, Super, Super

February 7, 2016, at Levi's Stadium in the San

Francisco Bay Area at Santa Clara, California.

As this was the 50th Super Bowl, the league 50
emphasized the "golden anniversary" with

various gold-themed initiatives, as well as take |
temporarily suspending the tradition of

naming each Super Bowl game with Roman place

numerals (under which the game would have . | | 7 | | ;
been known as "Super Bowl L"), so that the Il i | | | | | Meh) | ll! | _— a
logo could prominently feature the Arabic . l initiatives

numerals 50.

 

| 50

~

There are 13 natural reserves in Warsaw— How | | | | | []

among others, Bielany Forest, Kabaty

Woods, Czerniakéw Lake . About 15 many | NT | | | | hundreds, few, among, 15, several, only, 13, 9
kilometres ( 9 miles ) from Warsaw, the 1 n

Vistula river's environment changes natural | | natural, of

strikingly and features a perfectly preserved )

ecosystem, with a habitat of animals that reserves reserves

includes the otter, beaver and hundreds of .

bird species. There are also several lakes in are | are, are, are, are, are, includes

Warsaw — mainly the oxbow lakes, like

Czerniakow Lake, the lakes in the tazienki or there I []
Wilanow Parks, Kamionek Lake. There are (]

lot of small lakes in the parks, but only a few In

are permanent-the majority are emptied
before winter to clean them of plants and Warsaw, Warsaw, Warsaw

Warsaw |
sediments. . .
7) (TUTTO UNIO WANN inte species

Figure 3: Attention matrices for question-context tuples. The left palette shows the context paragraph (correct
answer in red and underlined), the middle palette shows the attention matrix (each row is a question word, each
column is a context word), and the right palette shows the top attention points for each question word, above a
threshold.

 

correctly answered by the baseline. The 14% that are incorrectly answered does not have a clear
pattern. This suggests that neural architectures are able to exploit much of the information captured
by the language features. We also break this comparison down by the first words in the questions
(Figure (2b). Our model outperforms the traditional baseline comfortably in every category.

Error Analysis. We randomly select 50 incorrect questions (based on EM) and categorize them
into 6 classes. 50% of errors are due to the imprecise boundaries of the answers, 28% involve
syntactic complications and ambiguities, 14% are paraphrase problems, 4% require external know]edge, 2% need multiple sentences to answer, and 2% are due to mistakes during tokenization. See
Appendix|A]for the examples of the error modes.

5 CLOZE TEST EXPERIMENTS

We also evaluate our model on the task of cloze-style reading comprehension using the CNN and

Daily Mail datasets 2015).

Dataset. Inacloze test, the reader is asked to fill in words that have been removed from a passage,
for measuring one’s ability to comprehend text. have recently compiled a massive Cloze-style comprehension dataset, consisting of 300k/4k/3k and 879k/65k/53k (train/dev/test)
examples from CNN and DailyMail news articles, respectively. Each example has a news article and
an incomplete sentence extracted from the human-written summary of the article. To distinguish this
task from language modeling and force one to refer to the article to predict the correct missing word,
the missing word is always a named entity, anonymized with a random ID. Also, the IDs must be
shuffled constantly during test, which is also critical for full anonymization.

Model Details. The model architecture used for this task is very similar to that for SQUAD (Section |4) with only a few small changes to adapt it to the cloze test. Since each answer in the
CNN/DailyMail datasets is always a single word (entity), we only need to predict the start index
(p'); the prediction for the end index (p7) is omitted from the loss function. Also, we mask out all
non-entity words in the final classification layer so that they are forced to be excluded from possible
answers. Another important difference from SQuAD is that the answer entity might appear more
than once in the context paragraph. To address this, we follow a similar strategy from|Kadlec et al.|
(2016). During training, after we obtain p', we sum all probability values of the entity instances
Published as a conference paper at ICLR 2017

 

in the context that correspond to the correct answer. Then the loss function is computed from the
summed probability. We use a minibatch size of 48 and train for 8 epochs, with early stop when
the accuracy on validation data starts to drop. Inspired by the window-based method
(2016), we split each article into short sentences where each sentence is a 19-word window around
each entity (hence the same word might appear in multiple sentences). The RNNs in BIDAF are not
feed-forwarded or back-propagated across sentences, which speed up the training process by parallelization. The entire training process takes roughly 60 hours on eight Titan X GPUs. The other
hyper-parameters are identical to the model described in Section|4]

Results. The results of our single-run models and competing approaches on the CNN/DailyMail
datasets are summarized in Table [3] * indicates ensemble methods. BIDAF outperforms previous
single-run models on both datasets for both val and test data. On the DailyMail test, our single-run
model even outperforms the best ensemble method.

CNN DailyMail
val test val test

 
 
     

 
 
   

 

 

MemNN pe O16) “ g
AS Reader (Kadlec et al. 1/2016) 68.6 69.5 75.0 73.9
DER Network (Kobayashi et al., ~1/2016) 71.3 72.9 : 2
Iterative Attention Se a 72.6 73.3 - =

Bpikeauet §

aet al. 2016
Qo (Chen eal [OTS

Table 3: Results on CNN/DailyMail datasets. We also include the results of previous ensemble methods
(marked with *) for completeness.

 

6 CONCLUSION

In this paper, we introduce BIDAF, a multi-stage hierarchical process that represents the context at
different levels of granularity and uses a bi-directional attention flow mechanism to achieve a queryaware context representation without early summarization. The experimental evaluations show that
our model achieves the state-of-the-art results in Stanford Question Answering Dataset (SQUAD)
and CNN/DailyMail cloze test. The ablation analyses demonstrate the importance of each component in our model. The visualizations and discussions show that our model is learning a suitable
representation for MC and is capable of answering complex questions by attending to correct locations in the given paragraph. Future work involves extending our approach to incorporate multiple
hops of the attention layer.

ACKNOWLEDGMENTS

This research was supported by the NSF (US 1616112), NSF CII 1703166), Allen Institute for AI
(66-9175), Allen Distinguished Investigator Award, Google Research Faculty Award, and Samsung
GRO Award. We thank the anonymous reviewers for their helpful comments.
Published as a conference paper at ICLR 2017

 

REFERENCES

Stanislaw Antol, Aishwarya Agrawal, Jiasen Lu, Margaret Mitchell, Dhruv Batra, C Lawrence Zitnick, and Devi Parikh. Vga: Visual question answering. In JCCV, 2015.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly
learning to align and translate. JCLR, 2015.

Danqi Chen, Jason Bolton, and Christopher D. Manning. A thorough examination of the cnn/daily
mail reading comprehension task. In ACL, 2016.

Yiming Cui, Zhipeng Chen, Si Wei, Shijin Wang, Ting Liu, and Guoping Hu. Attention-overattention neural networks for reading comprehension. arXiv preprint arXiv: 1607.04423, 2016.

Bhuwan Dhingra, Hanxiao Liu, William W Cohen, and Ruslan Salakhutdinov. Gated-attention
readers for text comprehension. arXiv preprint arXiv: 1606.01549, 2016.

Akira Fukui, Dong Huk Park, Daylen Yang, Anna Rohrbach, Trevor Darrell, and Marcus Rohrbach.
Multimodal compact bilinear pooling for visual question answering and visual grounding. In
EMNLP, 2016.

Karl Moritz Hermann, Tomas Kocisky, Edward Grefenstette, Lasse Espeholt, Will Kay, Mustafa
Suleyman, and Phil Blunsom. Teaching machines to read and comprehend. In N/JPS, 2015.

Felix Hill, Antoine Bordes, Sumit Chopra, and Jason Weston. The goldilocks principle: Reading
children’s books with explicit memory representations. In JCLR, 2016.

Sepp Hochreiter and Jurgen Schmidhuber. Long short-term memory. Neural Computation, 1997.

Rudolf Kadlec, Martin Schmid, Ondrej Bajgar, and Jan Kleindienst. Text understanding with the
attention sum reader network. In ACL, 2016.

Yoon Kim. Convolutional neural networks for sentence classification. In EMNLP, 2014.

Sosuke Kobayashi, Ran Tian, Naoaki Okazaki, and Kentaro Inui. Dynamic entity representation
with max-pooling improves machine reading. In NAACL-HLT, 2016.

Kenton Lee, Tom Kwiatkowski, Ankur Parikh, and Dipanjan Das. Learning recurrent span representations for extractive question answering. arXiv preprint arXiv: 1611.01436, 2016.

Jiasen Lu, Jianwei Yang, Dhruv Batra, and Devi Parikh. Hierarchical question-image co-attention
for visual question answering. In N/PS, 2016.

Mateusz Malinowski, Marcus Rohrbach, and Mario Fritz. Ask your neurons: A neural-based approach to answering questions about images. In JCCV, 2015.

Jeffrey Pennington, Richard Socher, and Christopher D Manning. Glove: Global vectors for word
representation. In EMNLP, 2014.

Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. Squad: 100,000+ questions
for machine comprehension of text. In EMNLP, 2016.

Matthew Richardson, Christopher JC Burges, and Erin Renshaw. Mctest: A challenge dataset for
the open-domain machine comprehension of text. In EMNLP, 2013.

Yelong Shen, Po-Sen Huang, Jianfeng Gao, and Weizhu Chen. Reasonet: Learning to stop reading
in machine comprehension. arXiv preprint arXiv: 1609.05284, 2016.

Alessandro Sordoni, Phillip Bachman, and Yoshua Bengio. Iterative alternating neural attention for
machine reading. arXiv preprint arXiv: 1606.02245, 2016.

Nitish Srivastava, Geoffrey E. Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov.
Dropout: a simple way to prevent neural networks from overfitting. JMLR, 2014.

Rupesh Kumar Srivastava, Klaus Greff, and Jiirgen Schmidhuber. Highway networks. arXiv preprint
arXiv: 1505.00387, 2015.

10
Published as a conference paper at ICLR 2017

 

Adam Trischler, Zheng Ye, Xingdi Yuan, and Kaheer Suleman. Natural language comprehension
with the epireader. In EMNLP, 2016.

Shuohang Wang and Jing Jiang. Machine comprehension using match-Ilstm and answer pointer.
arXiv preprint arXiv: 1608.07905, 2016.

Jason Weston, Sumit Chopra, and Antoine Bordes. Memory networks. In JCLR, 2015.

Caiming Xiong, Stephen Merity, and Richard Socher. Dynamic memory networks for visual and
textual question answering. In ICML, 2016a.

Caiming Xiong, Victor Zhong, and Richard Socher. Dynamic coattention networks for question
answering. arXiv preprint arXiv: 1611.01604, 201 6b.

Huijuan Xu and Kate Saenko. Ask, attend and answer: Exploring question-guided spatial attention
for visual question answering. In ECCV, 2016.

Zhilin Yang, Bhuwan Dhingra, Ye Yuan, Junjie Hu, William W Cohen, and Ruslan Salakhutdinov. Words or characters? fine-grained gating for reading comprehension. arXiv preprint
arXiv: 1611.01724, 2016.

Zichao Yang, Xiaodong He, Jianfeng Gao, Li Deng, and Alex Smola. Stacked attention networks
for image question answering. arXiv preprint arXiv: 1511.02274, 2015.

Yang Yu, Wei Zhang, Kazi Hasan, Mo Yu, Bing Xiang, and Bowen Zhou. End-to-end reading
comprehension with dynamic answer chunk ranking. arXiv preprint arXiv: 1610.09996, 2016.

Matthew D Zeiler. Adadelta: an adaptive learning rate method. arXiv preprint arXiv: 1212.5701,
2012.

Yuke Zhu, Oliver Groth, Michael S. Bernstein, and Li Fei-Fei. Visual7w: Grounded question answering in images. In CVPR, 2016.

11
Published as a conference paper at ICLR 2017

 

A ERROR ANALYSIS

Table[4] summarizes the modes of errors by BIDAF and shows examples for each category of error
in SQUAD.
Ratio (%)

Error type Example

Imprecise
answer 50
boundaries

Syntactic
complications
and
ambiguities

28

Context: “The Free Movement of Workers Regulation articles 1
to 7 set out the main provisions on equal treatment of workers.”
Question: “Which articles of the Free Movement of Workers
Regulation set out the primary provisions on equal treatment of
workers?”

Prediction: “1 to 7”, Answer: “articles 1 to 7”

Context: “A piece of paper was later found on which Luther
had written his last statement. ”

Question: “What was later discovered written by Luther?”
Prediction: “A piece of paper’, Answer: “his last statement”

 

Paraphrase

problems M4

External
knowledge

Multisentence

Incorrect
preprocessing

Context: “Generally, education in Australia follows the threetier model which includes primary education (primary schools),
followed by secondary education (secondary schools/high
schools) and tertiary education (universities and/or TAFE
colleges).”

Question: “What is the first model of education, in the Australian system?”

Prediction: “three-tier”, Answer: “primary education”

Context: “On June 4, 2014, the NFL announced that the
practice of branding Super Bowl games with Roman numerals,
a practice established at Super Bowl V, would be temporarily
suspended, and that the game would be named using Arabic
numerals as Super Bowl 50 as opposed to Super Bowl L.”
Question: “If Roman numerals were used in the naming of the
50th Super Bowl, which one would have been used?’
Prediction: “Super Bowl! 50”, Answer: “L”

Context: “Over the next several years in addition to host to host
interactive connections the network was enhanced to support
terminal to host connections, host to host batch connections
(remote job submission, remote printing, batch file transfer),
interactive file transfer, gateways to the Tymnet and Telenet
public data networks, X.25 host attachments, gateways to X.25
data networks, Ethernet attached hosts, and eventually TCP/IP
and additional public universities in Michigan join the network.
All of this set the stage for Merit’s role in the NSFNET project
starting in the mid-1980s.”

Question: “What set the stage for Merits role in NSFNET”
Prediction: “All of this set the stage for Merit ’s role in the
NSFNET project starting in the mid-1980s”, Answer: “Ethernet
attached hosts, and eventually TCP/IP and additional public
universities in Michigan join the network”

Context: “English chemist John Mayow (1641-1679) refined
this work by showing that fire requires only a part of air that
he called spiritus nitroaereus or just nitroaereus.”

Question: “John Mayow died in what year?”

Prediction: “1641-1679”, Answer: “1679”

Table 4: Error analysis on SQUAD. We randomly selected EM-incorrect answers and classified them
into 6 different categories. Only relevant sentence(s) from the context shown for brevity.

12
Published as a conference paper at ICLR 2017

 

B~ VARIATIONS OF SIMILARITY AND FUSION FUNCTIONS

 

 

 

EM Fl
Egn.{1] dot product 65.5 75.5
Eqn.|Tj linear 59.5 69.7
Egn.|Tq bilinear 61.6 71.8

Eqn.|Tj linear after MLP 66.2 76.4
Eqn.|2] MLP after concat 67.1 77.0
BIDAF (single) 68.0 77.3

Table 5: Variations of similarity function a (Equation [1) and fusion function G (Equation [2) and
their performance on the dev data of SQUAD. See Appendix |B] for the details of each variation.

In this appendix section, we experimentally demonstrate how different choices of the similarity
function a (Equation |1) and the fusion function G (Equation [2) impact the performance of our
model. Each variation is defined as following:
Eqn.[1} dot product. Dot product a is defined as
a(h,u)=h'u (6)

where | indicates matrix transpose. Dot product has been used for the measurement of similarity
between two vectors by|Hill et al.|(2016).
Eqn.[I} linear. Linear a is defined as

a(h, u) = Wyin[h; ul] (7)

where w,|, € R*@ is a trainable weight matrix. This can be considered as the simplification of

Equation|1|by dropping the term h o u in the concatenation.

Eqn.[T} bilinear. Bilinear a is defined as
a(h,u) = h' W,ju (8)
where Wj, € R?¢*24 is a trainable weight matrix. Bilinear term has been used by |Chen et al.
(2016).
Eqn.[T} linear after MLP. We can also perform linear mapping after single layer of perceptron:
a(h, u) = w,,, tanh(Wrip[h; u] + Dip) (9)
where Wp and bmip are trainable weight matrix and bias, respectively. Linear mapping after

perceptron layer has been used by|/Hermann et al.](2015).

Eqn.|2} MLP after concatenation. We can define @ as
B(h, G, h) = max(0, Wintp[h; G; ho G; ho h] + bytp) (10)

where Wmip € Reexee ond Dmip € R24 are trainable weight matrix and bias. This is equivalent to
adding ReLU after linearly transforming the original definition of G. Since the output dimension of
( changes, the input dimension of the first LSTM of the modeling layer will change as well.

The results of these variations on the dev data of SQUAD are shown in Table |5} It is important
to note that there are non-trivial gaps between our definition of a and other definitions employed
by previous work. Adding MLP in @ does not seem to help, yielding slightly worse result than G
without MLP.

13
