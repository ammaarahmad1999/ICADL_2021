arXiv:1606.01933v2 [cs.CL] 25 Sep 2016

A Decomposable Attention Model for Natural Language Inference

Ankur P. Parikh Oscar Tackstrom
Google Google
New York, NY New York, NY

Dipanjan Das Jakob Uszkoreit
Google Google
New York, NY Mountain View, CA

{aparikh, oscart, dipanjand, uszkoreit}@google.com

Abstract

We propose a simple neural architecture for natural language inference. Our approach uses attention to decompose the problem into subproblems that can be solved separately, thus making
it trivially parallelizable. On the Stanford Natural Language Inference (SNLI) dataset, we obtain state-of-the-art results with almost an order
of magnitude fewer parameters than previous
work and without relying on any word-order 1nformation. Adding intra-sentence attention that
takes a minimum amount of order into account
yields further improvements.

1 Introduction

Natural language inference (NLI) refers to the problem of determining entailment and contradiction relationships between a premise and a hypothesis. NLI
is acentral problem in language understanding
and recently the
large SNLI corpus of 570K sentence pairs was created for this task (Bowman et al., 2015). We present
a new model for NLI and leverage this corpus for
comparison with prior work.

A large body of work based on neural networks
for text similarity tasks including NLI has been pub
lished in recent years (Hu et al., 2014}|Rocktaschel
et al., 2016;/Wang and Jiang, 2016}/ Yin et al., 2016

inter alia). The dominating trend in these models is
to build complex, deep text representation models,

for example, with convolutional networks
al., 1990} CNNs henceforth) or long short-term mem
ory networks (Hochreiter and Schmidhuber, 1997

LSTMs henceforth) with the goal of deeper sentence comprehension. While these approaches have
yielded impressive results, they are often computationally very expensive, and result in models having
millions of parameters (excluding embeddings).

Here, we take a different approach, arguing that
for natural language inference it can often suffice to
simply align bits of local text substructure and then
aggregate this information. For example, consider
the following sentences:

e Bob is in his room, but because of the thunder
and lightning outside, he cannot sleep.

e Bob is awake.

e [tis sunny outside.

The first sentence is complex in structure and it
is challenging to construct a compact representation
that expresses its entire meaning. However, it is fairly
easy to conclude that the second sentence follows
from the first one, by simply aligning Bob with Bob
and cannot sleep with awake and recognizing that
these are synonyms. Similarly, one can conclude
that /t is sunny outside contradicts the first sentence,
by aligning thunder and lightning with sunny and
recognizing that these are most likely incompatible.

We leverage this intuition to build a simpler and
more lightweight approach to NLI within a neural
framework; with considerably fewer parameters, our
model outperforms more complex existing neural architectures. In contrast to existing approaches, our
approach only relies on alignment and is fully computationally decomposable with respect to the input
text. An overview of our approach is given in Figure{]] Given two sentences, where each word is represented by an embedding vector, we first create a soft
alignment matrix using neural attention
et al., 2015). We then use the (soft) alignment to
decompose the task into subproblems that are solved
separately. Finally, the results of these subproblems
are merged to produce the final classification. In addition, we optionally apply intra-sentence attention
to endow the model with a richer
encoding of substructures prior to the alignment step.
Asymptotically our approach does the same total
work as a vanilla LSTM encoder, while being trivially parallelizable across sentence length, which can
allow for considerable speedups in low-latency settings. Empirical results on the SNLI corpus show that
our approach achieves state-of-the-art results, while
using almost an order of magnitude fewer parameters
compared to complex LSTM-based approaches.

2 Related Work
Our method is motivated by the central role played by

alignment in machine translation and
previous approaches to sentence similarity modeling
Fader et al., 2013), natural language
inference
‘et al., 2008), and semantic parsing
2013). The neural counterpart to alignment, attention (Bahdanau et al., 2015), which is a key part
of our approach, was originally proposed and has
been predominantly used in conjunction with LSTMs

(Rocktaschel et al., 2016}|Wang and Jiang, 2016) and
to a lesser extent with CNNs (Yin et al., 2016). In

contrast, our use of attention is purely based on word
embeddings and our method essentially consists of
feed-forward networks that operate largely independently of word order.

3 Approach

Leta = (a1,.--,@¢,) and b = (b1,...,be,) be
the two input sentences of length ¢@, and @, respectively. We assume that each a;, b; € R?
is a word embedding vector of dimension d and
that each sentence is prepended with a “NULL”
token. Our training data comes in the form of
labeled pairs {a , b(™) , y(1*_|, where y() =
(y”, Lee syn )) is an indicator vector encoding the
label and C’ is the number of output classes. At test

park outside
[eo Pp

alice someone
l-c dp

++ flute+
solo music

=G([.p

®
cS
5
®
&
9
n

playing
music

g=H (f+]+.+P

 

Figure 1: Pictoral overview of the approach, showing the Attend

(left), Compare (center) and Aggregate (right) steps.

time, we receive a pair of sentences (a, b) and our
goal is to predict the correct label y.

Input representation. Let a = (@),...,a¢,) and
b = (b1,...,0¢,) denote the input representation of
each fragment that is fed to subsequent steps of the
algorithm. The vanilla version of our model simply
defines 4 := a and b := b. With this input representation, our model does not make use of word
order. However, we discuss an extension using intrasentence attention in Section[3.4]that uses a minimal
amount of sequence information.

The core model consists of the following three
components (see Figure (Ip, which are trained jointly:

Attend. First, soft-align the elements of a and b
using a variant of neural attention
and decompose the problem into the comparison of aligned subphrases.

Compare. Second, separately compare each
aligned subphrase to produce a set of vectors
{vii}, for a and {voj}eo4 for b. Each v1; is
a nonlinear combination of a; and its (softly) aligned
subphrase in b (and analogously for v2 ;).

Aggregate. Finally, aggregate the sets {vi ilit,
and {v2 ; ye , from the previous step and use the
result to predict the label 7.

3.1 Attend

We first obtain unnormalized attention weights e;,;,
computed by a function F’, which decomposes as:
Cig = F" (aj, b;) = F(a;)" F(b;) , (1)
This decomposition avoids the quadratic complexity
that would be associated with separately applying F’
lq X & times. Instead, only @, + 4 applications of
F are needed. We take F’ to be a feed-forward neural

network with ReLU activations (Glorot et al., 2011).
These attention weights are normalized as follows:

exp(eig) 5
Bi So teal,
j=l D> k=1 XP (E%k)

La

exp(ej;) _
Ap = Ss” =e 7 Qi .

(2)
i=1 DU ke1 &XP(Ex;)

Here £3; is the subphrase in b that is (softly) aligned
to a; and vice versa for a;.
3.2 Compare

Next, we separately compare the aligned phrases
{(a;, B;)}42, and {(b,, aj) } ry using a function G,
which in this work is again a feed-forward network:

Vii = G([ai, Bi) .., La],
V2,j >= G([b;, a5) ., Lp).

Vi € [1,

Vj € (1, (3)

where the brackets |-, -| denote concatenation. Note
that since there are only a linear number of terms in
this case, we do not need to apply a decomposition
as was done in the previous step. Thus G can jointly
take into account both a;, and /;.

3.3 Aggregate

We now have two sets of comparison vectors
{vi i}2, and {vo,j}o0 ,- We first aggregate over
each set by summation:

La Lp
Vit= ) Vii : v= ) V2, °
i=1 j=l

and feed the result through a final classifier H, that
is a feed forward network followed by a linear layer:

(5)

(4)

y = A(|v1, v2),

where y € R® represents the predicted (unnormalized) scores for each class and consequently the predicted class is given by y = argmax,yj.

For training, we use multi-class cross-entropy loss

with dropout regularization (Srivastava et al., 2014):
Ly af tog <r ed_

L(Opr, 0G, 0H) =
Nt oe 1 &XP(Ye)

Here Or, 9G, 94 denote the learnable parameters of
the functions F, G and H, respectively.

3.4 Intra-Sentence Attention (Optional)

In the above model, the input representations are
simple word embeddings. However, we can augment
this input representation with intra-sentence attention
to encode compositional relationships between words

within each sentence, as proposed by |Cheng et al
(2016). Similar to Eqs.[I]and|2} we define

ig = ‘ntra(@i)” Fintra(@) , (6)

where Fintra 18 a feed-forward network. We then create the self-aligned phrases

la
= ye exp( fig + di-j)

_ 7
S41 exP(fik + di-x) 2 )

j=l

The distance-sensitive bias terms d;_; € IR provides
the model with a minimal amount of sequence information, while remaining parallelizable. These terms
are bucketed such that all distances greater than 10
words share the same bias. The input representation
for subsequent steps is then defined as @; := |[a;, a;
and analogously b; := [b;, bi].

4 Computational Complexity

We now discuss the asymptotic complexity of our
approach and how it offers a higher degree of parallelism than LSTM-based approaches. Recall that
d denotes embedding dimension and ¢ means sentence length. For simplicity we assume that all hidden dimensions are d and that the complexity of
matrix(d x d)-vector(d x 1) multiplication is O(d?).
A key assumption of our analysis is that  < d,
which we believe is reasonable and is true of the
SNLI dataset where £ < 80,
whereas recent LSTM-based approaches have used
d > 300. This assumption allows us to bound the
complexity of computing the @? attention weights.

Complexity of LSTMs. The complexity of an
LSTM cell is O(d*), resulting in a complexity of
O(€d) to encode the sentence. Adding attention as

in|Rocktaschel et al. (2016) increases this complexity
to O(éd? + 7d).

‘Complexity of our Approach. Application of a

feed-forward network requires O(d?) steps. Thus,
the Compare and Aggregate steps have complexity
O(€d*) and O(d?) respectively. For the Attend step,
Method

Lexicalized Classifier (Bowman et al., 2015)

300D LSTM RNN encoders (
1024D pretrained GRU encoders

300D tree-based CNN encoders (Mou et al., 2015)

300D SPINN-PI encoders (Bowman et al., 2016)

 

  
  

 

100D LSTM with attention (Rocktaschel et al., 2016)

300D mLSTM (Wang and Jiang, 2016)

450D LSTMN with deep attention fusion (Cheng et al., 2016)

Our approach (vanilla)
Our approach with intra-sentence attention

Bowman et al., 2016)
(Vendrov et al., 2015)

 
     
  

Train Acc ‘Test Acc #Parameters
99.7 78.2 —
83.9 80.6 3.0M
98.8 81.4 15.0M
83.3 82.1 3.5M
89.2 83.2 3.7M
85.3 83.5 252K
92.0 86.1 1.9M
88.5 86.3 3.4M
89.5 86.3 382K
90.5 $6.8 582K

Table 1: Train/test accuracies on the SNLI dataset and number of parameters (excluding embeddings) for each approach.

Method N E C

Bowman et al. (2016) 80.6 88.2 85.5
Wang and Jiang (2016) 81.6 91.6 874
Our approach (vanilla) 83.6 91.3 85.8
Our approach w/ intra att. 83.7 92.1 86.7

Table 2: Breakdown of accuracy with respect to classes on SNLI

development set. N=neutral, E=entailment, C=contradiction.

F is evaluated O(£) times, giving a complexity of
O(éd?). Each attention weight e;; requires one dot
product, resulting in a complexity of O(¢7d).

Thus the total complexity of the model is O(€d? +
(7d), which is equal to that of an LSTM with attention. However, note that with the assumption that
¢ < d, this becomes O(€d?) which is the same complexity as a regular LSTM. Moreover, unlike the
LSTM, our approach has the advantage of being parallelizable over @, which can be useful at test time.

5 Experiments

We evaluate our approach on the Stanford Natural
Language Inference (SNLI) dataset
2015). Given a sentences pair (a,b), the task is to
predict whether b is entailed by a, b contradicts a,
or whether their relationship is neutral.

5.1 Implementation Details

The method was implemented in TensorFlow
et al., 2015).

Data preprocessing: Following |Bowman et al
(2015), we remove examples labeled “—’ (no gold
label) from the dataset, which leaves 549,367 pairs

for training, 9,842 for development, and 9,824 for
testing. We use the tokenized sentences from the
non-binary parse provided in the dataset and prepend
each sentence with a “NULL” token. During training,
each sentence was padded up to the maximum length
of the batch for efficient training (the padding was
explicitly masked out so as not to affect the objective/gradients). For efficient batching in TensorFlow,
we semi-sorted the training data to first contain examples where both sentences had length less than
20, followed by those with length less than 50, and
then the rest. This ensured that most training batches
contained examples of similar length.

Embeddings: We use 300 dimensional GloVe
embeddings to represent
words. Each embedding vector was normalized to
have £2 norm of 1 and projected down to 200 dimensions, a number determined via hyperparameter
tuning. Out-of-vocabulary (OOV) words are hashed
to one of 100 random embeddings each initialized
to mean 0 and standard deviation 1. All embeddings
remain fixed during training, but the projection matrix is trained. All other parameter weights (hidden
layers etc.) were initialized from random Gaussians
with mean 0 and standard deviation 0.01.

Each hyperparameter setting was run on a single machine with 10 asynchronous gradient-update

threads, using Adagrad (Duchi et al., 2011) for opti
mization with the default initial accumulator value of
0.1. Dropout regularization
was used for all ReLU layers, but not for the final
linear layer. We additionally tuned the following
hyperparameters and present their chosen values in
 

 

 

ID Sentence 1 Sentence 2 DA (vanilla) DA (intra att.) SPINN-PI mLSTM_ Gold

A Two kids are standing in the ocean hugging Two kids enjoy their day at the beach. N N E E N
each other.

B A dancer in costumer performs on stage while the man is eapeivatadl N N E E N
a man watches.

C They are sitting on the edge of a fountain The fountain is splashing the persons seated. N N C C N

D Two dogs play with tennis ball in field. Dogs are watching a tennis match. N C C C C

5 Two kids begin to make a snowman on a sunny Two penguins making a snowman. N Cc Cc Cc Cc
winter day.
The horses pull the carriage, holding people <4. % :

F anid. a det, htenalr the aati. Horses ride in a carriage pulled by a dog. E E C C C

G o woman GONE LSE Faye HR Se Tlaiye Lier The woman has her eyes open. E E E E C

H Two women having drinks and smoking Three women are at a bar. Cc
cigarettes at the bar.

I A band playing with fans watching. A band watches the fans play C

Table 3: Example wins and losses compared to other approaches. DA (Decomposable Attention) refers to our approach while
SPINN-PI and mLSTM are previously developed methods (see Table 1).

parentheses: network size (2-layers, each with 200
neurons), batch size (4), |'| dropout ratio (0.2) and
learning rate (0.05—vanilla, 0.025—intra-attention).
All settings were run for 50 million steps (each step
indicates one batch) but model parameters were saved
frequently as training progressed and we chose the
model that did best on the development set.

5.2 Results

Results in terms of 3-class accuracy are shown in
Table[I] Our vanilla approach achieves state-of-theart results with almost an order of magnitude fewer
parameters than the LSTMN of|Cheng et al. (2016).
Adding intra-sentence attention gives a considerable
improvement of 0.5 percentage points over the existing state of the art. Table|2] gives a breakdown of
accuracy on the development set showing that most
of our gains stem from neutral, while most losses
come from contradiction pairs.

Table[3] shows some wins and losses. Examples AC are cases where both variants of our approach are

correct while both SPINN-PI (Bowman et al., 2016)
and the mLSTM (Wang and Jiang, 2016) are incor
rect. In the first two cases, both sentences contain
phrases that are either identical or highly lexically
related (e.g. “Two kids” and “ocean / beach’) and our
approach correctly favors neutral in these cases. In
Example C, it is possible that relying on word-order
may confuse SPINN-PI and the mLSTM due to how
“fountain” is the object of a preposition in the first
sentence but the subject of the second.

The second set of examples (D-F) are cases where

"16 or 32 also work well and are a bit more stable.

our vanilla approach is incorrect but mLSTM and
SPINN-PI are correct. Example F requires sequential information and neither variant of our approach
can predict the correct class. Examples D-E are interesting however, since they don’t require word order information, yet intra-attention seems to help.
We suspect this may be because the word embeddings are not fine-grained enough for the algorithm
to conclude that “play/watch” is a contradiction, but
intra-attention, by adding an extra layer of composition/nonlinearity to incorporate context, compensates
for this.

Finally, Examples G-I are cases that all methods
get wrong. The first is actually representative of many
examples in this category where there is one critical
word that separates the two sentences (close vs open
in this case) and goes unnoticed by the algorithms.
Examples H requires inference about numbers and
Example I needs sequence information.

6 Conclusion

We presented a simple attention-based approach to
natural language inference that is trivially parallelizable. The approach outperforms considerably more
complex neural methods aiming for text understanding. Our results suggest that, at least for this task,
pairwise comparisons are relatively more important
than global sentence-level representations.

Acknowledgements

We thank Slav Petrov, Tom Kwiatkowski, Yoon Kim,
Erick Fonseca, Mark Neumann for useful discussion
and Sam Bowman and Shuohang Wang for providing
us their model outputs for error analysis.
References

[Abadi et al.2015] Martin Abadi, Ashish Agarwal, Paul
Barham, Eugene Brevdo, Zhifeng Chen, Craig Citro,
Greg S Corrado, Andy Davis, Jeffrey Dean, Matthieu
Devin, et al. 2015. TensorFlow: Large-scale machine
learning on heterogeneous systems. Software available
from tensorflow. org.

[Andreas et al.2013] Jacob Andreas, Andreas Vlachos,
and Stephen Clark. 2013. Semantic parsing as machine translation. In Proceedings of ACL.

[Bahdanau et al.2015] Dzmitry Bahdanau, Kyunghyun
Cho, and Yoshua Bengio. 2015. Neural machine translation by jointly learning to align and translate. In
Proceedings of ICLR.

[Bos and Markert2005] Johan Bos and Katja Markert.
2005. Recognising textual entailment with logical inference. In Proceedings of EMNLP.

[Bowman et al.2015] Samuel R. Bowman, Gabor Angeli,
Christopher Potts, and Christopher D. Manning. 2015.
A large annotated corpus for learning natural language
inference. In Proceedings of EMNLP.

[Bowman et al.2016] Samuel R. Bowman, Jon Gauthier,
Abhinav Rastogi, Raghav Gupta, Christopher D. Manning, and Christopher Potts. 2016. A fast unified model
for parsing and sentence understanding. In Proceedings
of ACL.

[Chang et al.2010] Ming-Wei Chang, Dan Goldwasser,
Dan Roth, and Vivek Srikumar. 2010. Discriminative learning over constrained latent representations. In
Proceedings of HLT-NAACL.

[Cheng et al.2016] Jianpeng Cheng, Li Dong, and Mirella
Lapata. 2016. Long short-term memory-networks for
machine reading. In Proceedings of EMNLP.

[Das and Smith2009] Dipanjan Das and Noah A. Smith.
2009. Paraphrase identification as probabilistic quasisynchronous recognition. In Proceedings of ACLIJCNLP.

[Duchi et al.2011] John Duchi, Elad Hazan, and Yoram
Singer. 2011. Adaptive subgradient methods for online
learning and stochastic optimization. The Journal of
Machine Learning Research, 12:2121-—2159.

[Fader et al.2013] Anthony Fader, Luke S Zettlemoyer,
and Oren Etzioni. 2013. Paraphrase-driven learning
for open question answering. In Proceedings of ACL.

[Glorot et al.2011] Xavier Glorot, Antoine Bordes, and
Yoshua Bengio. 2011. Deep sparse rectifier neural
networks. In Proceedings of AISTATS.

[Haghighi et al.2005] Aria D. Haghighi, Andrew Y. Ng,
and Christopher D. Manning. 2005. Robust textual
inference via graph matching. In Proceedings of HLTNAACL.

[Hickl and Bensley2007] Andrew Hickl and Jeremy Bensley. 2007. A discourse commitment-based framework

for recognizing textual entailment. In Proceedings of
the ACL-PASCAL Workshop on Textual Entailment and
Paraphrasing. Association for Computational Linguistics.

[Hochreiter and Schmidhuber1997] Sepp Hochreiter and
Jiirgen Schmidhuber. 1997. Long short-term memory.
Neural computation, 9(8):1735—1780.

[Hu et al.2014] Baotian Hu, Zhengdong Lu, Hang Li, and
Qingcai Chen. 2014. Convolutional neural network
architectures for matching natural language sentences.
In Advances in NIPS.

[Katz1972] Jerrold J. Katz.
Harper & Row.

[Koehn2009] Philipp Koehn. 2009. Statistical machine
translation. Cambridge University Press.

[LeCun et al.1990] Y. LeCun, B. Boser, J.S. Denker,
D. Henderson, R.E. Howard, W. Hubbard, and L.D.
Jackel. 1990. Handwritten digit recognition with a
back-propagation network. In Advances in NIPS.

[MacCartney and Manning2009] Bill MacCartney and
Christopher D. Manning. 2009. An extended model of
natural logic. In Proceedings of the IWCS.

[MacCartney et al.2006] Bill MacCartney, Trond
Grenager, Marie-Catherine de Marneffe, Daniel Cer,
and Christopher D Manning. 2006. Learning to
recognize features of valid textual entailments. In
Proceedings of HLT-NAACL.

[MacCartney et al.2008] Bill MacCartney, Michel Galley,
and Christopher D Manning. 2008. A phrase-based
alignment model for natural language inference. In
Proceedings of EMNLP.

[Marsi and Krahmer2005] Erwin Marsi and Emiel Krahmer. 2005. Classification of semantic relations by
humans and machines. In Proceedings of the ACL
workshop on Empirical Modeling of Semantic Equivalence and Entailment.

[Mou et al.2015] Lili Mou, Men Rui, Ge Li, Yan Xu,
Lu Zhang, Rui Yan, and Zhi Jin. 2015. Natural language inference by tree-based convolution and heuristic
matching. In Proceedings of ACL (short papers).

[Pennington et al.2014] Jeffrey Pennington, Richard
Socher, and Christopher D. Manning. 2014. GloVe:
Global vectors for word representation. In Proceedings
of EMNLP.

[Rocktaschel et al.2016] Tim  Rocktaschel, Edward
Grefenstette, Karl Moritz Hermann, Tomas KoC¢isky,
and Phil Blunsom. 2016. Reasoning about entailment
with neural attention. In Proceedings of ICLR.

1972. Semantic theory.

[Srivastava et al.2014] Nitish Srivastava, Geoffrey Hinton,
Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. 2014. Dropout: A simple way to prevent neural
networks from overfitting. The Journal of Machine
Learning Research, 15(1):1929-1958.
[van Benthem2008] Johan van Benthem. 2008. A brief
history of natural logic. College Publications.

[Vendrov et al.2015] Ivan Vendrov, Ryan Kiros, Sanja Fidler, and Raquel Urtasun. 2015. Order-embeddings of
images and language. In Proceedings of ICLR.

[Wang and Jiang2016] Shuohang Wang and Jing Jiang.
2016. Learning natural language inference with LSTM.
In Proceedings of NAACL.

[Yin et al.2016] Wenpeng Yin, Hinrich Schiitze, Bing X1ang, and Bowen Zhou. 2016. ABCNN: Attentionbased convolutional neural network for modeling sentence pairs. In Transactions of the Association of Computational Linguistics.
