title
Deep Recurrent Models with Fast-Forward Connections for Neural Machine Translation
abstract
Neural machine translation (NMT) aims at solving machine translation (MT) problems using neural networks and has exhibited promising results in recent years. However, most of the existing NMT models are shallow and there is still a performance gap between a single NMT model and the best conventional MT system. In this work, we introduce a new type of linear connections, named fastforward connections, based on deep Long Short-Term Memory (LSTM) networks, and an interleaved bi-directional architecture for stacking the LSTM layers. Fast-forward connections play an essential role in propagating the gradients and building a deep topology of depth 16. On the WMT'14 Englishto-French task, we achieve BLEU=37.7 with a single attention model, which outperforms the corresponding single shallow model by 6.2 BLEU points. This is the first time that a single NMT model achieves state-of-the-art performance and outperforms the best conventional model by 0.7 BLEU points. We can still achieve BLEU=36.3 even without using an attention mechanism. After special handling of unknown words and model ensembling, we obtain the best score reported to date on this task with BLEU=40.4. Our models are also validated on the more difficult WMT'14 English-to-German task.
Introduction
Neural machine translation (NMT) has attracted a lot of interest in solving the machine translation (MT) problem in recent years. Unlike conventional statistical machine translation (SMT) systems which consist of multiple separately tuned components, NMT models encode the source sequence into continuous representation space and generate the target sequence in an end-to-end fashon. Moreover, NMT models can also be easily adapted to other tasks such as dialog systems , question answering systems and image caption generation.
In general, there are two types of NMT topologies: the encoder-decoder network and the attention network. The encoder-decoder network represents the source sequence with a fixed dimensional vector and the target sequence is generated from this vector word byword. The attention network uses the representations from all time steps of the input sequence to build a detailed relationship between the target words and the input words. Recent results show that the systems based on these models can achieve similar performance to conventional SMT systems.
However, a single neural model of either of the above types has not been competitive with the best conventional system when evaluated on the WMT'14 English-to-French task. The best BLEU score from a single model with six layers is only 31.5 while the conventional method of achieves 37.0.
We focus on improving the single model perfor-mance by increasing the model depth. Deep topology has been proven to outperform the shallow architecture in computer vision. In the past two years the top positions of the ImageNet contest have always been occupied by systems with tensor even hundreds of layers. But in NMT, the biggest depth used successfully is only six. We attribute this problem to the properties of the Long Short-Term Memory (LSTM) which is widely used in NMT. In the LSTM, there are more non-linear activations than in convolution layers. These activations significantly decrease the magnitude of the gradient in the deep topology, especially when the gradient propagates in recurrent form. There are also many efforts to increase the depth of the LSTM such as the work by, where the shortcuts do not avoid the nonlinear and recurrent computation.
In this work, we introduce a new type of linear connections for multi-layer recurrent networks. These connections, which are called fast-forward connections, play an essential role in building a deep topology with depth of 16. In addition, we introduce an interleaved bi-directional architecture to stack LSTM layers in the encoder. This topology can be used for both the encoder-decoder network and the attention network. On the WMT'14 Englishto-French task, this is the deepest NMT topology that has ever been investigated. With our deep attention model, the BLEU score can be improved to 37.7 outperforming the shallow model which has six layers by 6.2 BLEU points. This is also the first time on this task that a single NMT model achieves state-of-the-art performance and outperforms the best conventional SMT system with an improvement of 0.7. Even without using the attention mechanism, we can still achieve 36.3 with a single model. After model ensembling and unknown word processing, the BLEU score can be further improved to 40.4. When evaluated on the subset of the test corpus without unknown words, our model achieves 41.4. As a reference, previous work showed that oracle rescoring of the 1000-best sequences generated by the SMT model can achieve the BLEU score of about 45. Our models are also validated on the more difficult WMT'14 English-to-German task.

Neural Machine Translation
Neural machine translation aims at generating the target word sequence y = {y 1 , . . . , y n } given the source word sequence x = {x 1 , . . . , x m } with neural models. In this task, the likelihood p(y | x, ?) of the target sequence will be maximized with parameter ? to learn:
where y 0:j?1 is the sub sequence from y 0 toy j?1 . y 0 and y m+1 denote the start mark and end mark of target sequence respectively. The process can be explicitly split into an encoding part, a decoding part and the interface between these two parts. In the encoding part, the source sequence is processed and transformed into a group of vectors e = {e 1 , ? ? ? , em } for each time step. Further operations will be used at the interface part to extract the final representation c of the source sequence from e. At the decoding step, the target sequence is generated from the representation c.
Recently, there have been two types of NMT models which are different in the interface part. In the encoder-decoder model, a single vector extracted from e is used as the representation. In the attention model, c is dynamically obtained according to the relationship between the target sequence and the source sequence.
The recurrent neural network (RNN), or its specific form the LSTM, is generally used as the basic unit of the encoding and decoding part. However, the topology of most of the existing models is shallow. In the attention network, the encoding part and the decoding part have only one LSTM layer respectively. In the encoder-decoder network, researchers have used at most six LSTM layers. Because machine translation is a difficult problem, we believe more complex encoding and decoding architecture is needed for modeling the relationship between the source sequence and the target sequence. In this work, we focus on enhancing the complexity of the encoding/decoding architecture by increasing the model depth.
Deep neural models have been studied in a wide range of problems. In computer vision, models with more than ten convolution layers outperform shallow ones on a series of image tasks in recent years. Different kinds of shortcut connections are proposed to decrease the length of the gradient propagation path. Training networks based on LSTM layers, which are widely used in language problems, is a much more challenging task. Because of the existence of many more nonlinear activations and the recurrent computation, gradient values are not stable and are generally smaller. Following the same spirit for convolutional networks, a lot of effort has also been spent on training deep LSTM networks. introduced depth-gated shortcuts, connecting LSTM cells at adjacent layers, to provide a fast way to propagate the gradients. They validated the modification of these shortcuts on an MT task and a language modeling task. However, the best score was obtained using models with three layers. Similarly, proposed a two dimensional structure for the LSTM. Their structure decreases the number of nonlinear activations and path length. However, the gradient propagation still relies on the recurrent computation. The investigations were also made on question-answering to encode the questions, whereat most two LSTM layers were stacked.
Based on the above considerations, we propose new connections to facilitate gradient propagation in the following section.

Deep Topology
We build the deep LSTM network with the new proposed linear connections. The shortest paths through the proposed connections do not include any nonlinear transformations and do not rely on any recurrent computation. We call these connections fastforward connections. Within the deep topology, we also introduce an interleaved bi-directional architecture to stack the LSTM layers.

Network
Our entire deep neural network is shown in. This topology can be divided into three parts: the encoder part (P-E) on the left, the decoder part (P-D) on the right and the interface between these two parts (P-I) which extracts the representation of the source sequence. We have two instantiations of this topology: Deep-ED and Deep-Att, which correspond to the extension of the encoder-decoder network and the attention network respectively. Our main innovation is the novel scheme for connecting adjacent recurrent layers. We will start with the basic RNN model for the sake of clarity. Recurrent layer: When an input sequence {x 1 , . . . , x m } is given to a recurrent layer, the output ht at each time step t can be computed as (see)
where the bias parameter is not included for simplicity. We use a red circle and a blue empty square to denote an input and a hidden state. A blue square with a "-" denotes the previous hidden state. A dotted line means that the hidden state is used recurrently. This computation can be equivalently split into two consecutive steps:
? Feed-Forward computation: ft = W f x t . Left part in). "f" block.
? Recurrent computation: RNN (f t , h t?1 ). Right part and the sum operation (+) followed by activation in. "r" block.
For a deep topology with stacked recurrent layers, the input of each block "f" at recurrent layer k (denoted by f k ) is usually the output of block "r" at its previous recurrent layer k ? 1 (denoted by h k?1 ). In our work, we add fast-forward connections (F-F connections) which connect two feed-forward computation blocks "f" of adjacent recurrent layers. It means that each block "f" at recurrent layer k takes both the outputs of block "f" and block "r" at its previous layer as input (). F-F connections are denoted by dashed red lines in and. The path of F-F connections contains neither nonlinear activations nor recurrent computation. It provides a fast path for information to propagate, so we call this path fast-forward connections. Additionally, in order to learn more temporal dependencies, the sequences can be processed in different directions at each pair of adjacent recurrent layers. This is quantitatively expressed in Eq. 3:
The opposite directions are marked by the direction term (?1) k . At the first recurrent layer, the block "f" takes x t as the input.
[ , ] denotes the concatenation of vectors. This is shown in. The two changes are summarized here:
? We add a connection between f kt and f k?1 t . Without f k?1 t , our model will be reduced to the traditional stacked model.
? We alternate the RNN direction at different layers k with the direction term (?1) k . If we fix the direction term to ?1, all layers work in the forward direction.
LSTM layer: In our experiments, instead of an RNN, a specific type of recurrent layer called LSTM) is used. The LSTM is structurally more complex than the basic RNN in Eq. 2. We define the computation of the LSTM as a function which maps the input f and its state-output pair (h, s) at the previous time step to the current stateoutput pair. The exact computations for (h t , st ) = LSTM(f t , h t?1 , s t?1 ) are the following:
is the concatenation of four vectors of equal size, ? means element-wise multiplication, ? i is the input activation function, ? o is the output activation function, ? g is the activation function for gates, and W r , ? ? , ? ? , and ? ? are the parameters of the LSTM. It is slightly different from the standard notation in that we do not have a matrix to multiply with the input fin our notation. With this notation, we can write down the computations for our deep bi-directional LSTM model with F-F connections:
where x t is the input to the deep bi-directional LSTM model. For the encoder, x t is the embedding of the t th word in the source sentence. For the decoder x t is the concatenation of the embedding of the t th word in the target sentence and the encoder representation for step t. In our final model two additional operations are used with Eq. 5, which is shown in Eq. 6. Half(f ) denotes the first half of the elements off , and Dr(h) is the dropout operation  which randomly sets an element of h to zero with a certain probability. The use of Half(?) is to reduce the parameter size and does not affect the performance. We observed noticeable performance degradation when using only the first third of the elements of "f".
With the F-F connections, we build a fast channel to propagate the gradients in the deep topology. F-F  connections can accelerate the model convergence and while improving the performance. A similar idea was also used in. Encoder: The LSTM layers are stacked following Eq. 5. We call this type of encoder interleaved bidirectional encoder. In addition, there are two similar columns (a 1 and a 2 ) in the encoder part. Each column consists of n e stacked LSTM layers. There is no connection between the two columns. The first layers of the two columns process the word representations of the source sequence in different directions. At the last LSTM layers, there are two groups of vectors representing the source sequence. The group size is the same as the length of the input sequence.
Interface: Prior encoder-decoder models and attention models are different in their method of extracting the representations of the source sequences. In our work, as a consequence of the introduced F-F connections, we have 4 output vectors (h For Deep-Att, we do not need the above two operations. We only concatenate the 4 output vectors at each time step to obtain e t , and a soft attention mechanism is used to calculate the final representation ct from e t . e t is summarized as:
Note that the vector dimensionality off is four times larger than that of h (see Eq. 4). ct is summarized as:
? t,t is the normalized attention weight computed by:
the concatenated vector e t to a vector with 1/4 dimension size, denoted by the (fully connected) block "fc" in. Decoder: The decoder follows Eq. 5 and Eq. 6 with fixed direction term ?1. At the first layer, we use the following x t :
y t?1 is the target word embedding at the previous time step and y 0 is zero. There is a single column of n d stacked LSTM layers. We also use the F-F connections like those in the encoder and all layers are in the forward direction. Note that at the last LSTM layer, we only use ht to make the prediction with a softmax layer. Although the network is deep, the training technique is straightforward. We will describe this in the next part.

Training technique
We take the parallel data as the only input without using any monolingual data for either word representation pre-training or language modeling. Because of the deep bi-directional structure, we do not need to reverse the sequence order as.
The deep topology brings difficulties for the model training, especially when first order methods such as stochastic gradient descent (SGD) are used. The parameters should be properly initialized and the converging process can be slow. We tried several optimization techniques such as AdaDelta (Zeiler, 2012), RMSProp (Tieleman and  and. We found that all of them were able to speedup the process a lot compared to simple SGD while no significant performance difference was observed among them. In this work, we chose Adam for model training and do not present a detailed comparison with other optimization methods.
Dropout  is also used to avoid over-fitting. It is utilized on the LSTM nodes h kt (See Eq. 5) with a ratio of pd for both the encoder and decoder.
During the whole model training process, we keep all hyper parameters fixed without any intermediate interruption. The hyper parameters are selected according to the performance on the development set.
For such a deep and large network, it is not easy to determine the tuning strategy and this will be considered in future work.

Generation
We use the common left-to-right beam-search method for sequence generation. At each time step t, the wordy t can be predicted by:
where? t is the predicted target word.? 0:t?1 is the generated sequence from time step 0 tot ? 1. We keep n b best candidates according to Eq. 11 at each time step, until the end of sentence mark is generated. The hypotheses are ranked by the total likelihood of the generated sequence, although normalized likelihood is used in some works.

Experiments
We evaluate our method mainly on the widely used WMT'14 English-to-French translation task. In order to validate our model on more difficult language pairs, we also provide results on the WMT'14 English-to-German translation task. Our models are implemented in the PADDLE (PArallel Distributed Deep LEarning) platform.

Data sets
For both tasks, we use the full WMT'14 parallel corpus as our training data. The detailed data sets are listed below:
? English-to-French: Europarl v7, Common Crawl, UN, News Commentary, Gigaword
? English-to-German: Europarl v7, Common Crawl, News Commentary
In total, the English-to-French corpus includes 36 million sentence pairs, and the English-to-German corpus includes 4.5 million sentence pairs. The news-test-2012 and news-test-2013 are concatenated as our development set, and the news-test-2014 is the test set. Our data partition is consistent with previous works on NMT to ensure fair comparison.
For the source language, we select the most frequent 200K words as the input vocabulary. For the target language we select the most frequent 80K French words and the most frequent 160K German words as the output vocabulary. The full vocabulary of the German corpus is larger, so we select more German words to build the target vocabulary. Out-of-vocabulary words are replaced with the unknown symbol unk . For complete comparison to previous work on the Englishto-French task, we also show the results with a smaller vocabulary of 30K input words and 30K output words on the sub train set with selected 12M parallel sequences.

Model settings
We have two models as described above, named Deep-ED and Deep-Att. Both models have exactly the same configuration and layer size except the interface part P-I.
We use 256 dimensional word embeddings for both the source and target languages. All LSTM layers, including the 2?n e layers in the encoder and then d layers in the decoder, have 512 memory cells. The output layer size is the same as the size of the target vocabulary. The dimension of ct is 5120 and 1280 for Deep-ED and Deep-Att respectively. For each LSTM layer, the activation functions for gates, inputs and outputs are sigmoid, tanh, and tanh respectively.
Our network is narrow on word embeddings and LSTM layers. Note that in previous work, 1000 dimensional word embeddings and 1000 dimensional LSTM layers are used. We also tried larger scale models but did not obtain further improvements.

Optimization
Note that each LSTM layer includes two parts as described in Eq. 3, feed-forward computation and recurrent computation. Since there are non-linear activations in the recurrent computation, a larger learning rate l r = 5 ? 10 ?4 is used, while for the feed-forward computation a smaller learning rate l f = 4 ? 10 ?5 is used. Word embeddings and the softmax layer also use this learning rate l f . We refer all the parameters not used for recurrent computation as non-recurrent part of the model.
Because of the large model size, we use strong L 2 regularization to constrain the parameter matrix v in the following way:
Here r is the regularization strength, l is the corresponding learning rate, g stands for the gradients of v. The two embedding layers are not regularized.
All the other layers have the same r = 2.
The parameters of the recurrent computation part are initialized to zero. All non-recurrent parts are randomly initialized with zero mean and standard deviation of 0.07. A detailed guide for setting hyperparameters can be found in.
The dropout ratio pd is 0.1. In each batch, there are 500 ? 800 sequences in our work. The exact number depends on the sequence lengths and model size. We also find that larger batch size results in better convergence although the improvement is not large. However, the largest batch size is constrained by the GPU memory. We use 4 ? 8 GPU machines (each has 4 K40 GPU cards) running for 10 days to train the full model with parallelization at the data batch level. It takes nearly 1.5 days for each pass.
One thing we want to emphasize here is that our deep model is not sensitive to these settings. Small variation does not affect the final performance.

Results
We evaluate the same way as previous NMT works. All reported BLEU scores are computed with the multi-bleu.perl 1 script which is also used in the above works. The results are for tokenized and case sensitive evaluation.

Single models
English-to-French: First we list our single model results on the English-to-French task in Tab. 1. In the first block we show the results with the full corpus. The previous best single NMT encoderdecoder model (Enc-Dec) with six layers achieves BLEU=31.5. From Deep-ED, we obtain the BLEU score of 36.3, which outperforms Enc-Dec model by 4.8 BLEU points. This result is even better than the ensemble result of eight Enc-Dec models, which is 35.6. This shows that, in addition to the convolutional layers for computer vision, deep topologies can also work for LSTM layers. For Deep-Att, the performance is further improved to 37.7. We also list the previous state-of-the-art performance from a conventional SMT system with the BLEU of 37.0. This is the first time that a single NMT model trained in an end-to-end form beats the best conventional system on this task.
We also show the results on the smaller data set with 12M sentence pairs and 30K vocabulary in the second block. The two attention models, RNNsearch and RNNsearch-LV, achieve BLEU scores of 28.5 and 32.7 respectively. Note that RNNsearch-LV uses a large output vocabulary of 500K words based on the standard attention model RNNsearch. We obtain BLEU=35.9 which outperforms its corresponding shallow model RNNsearch by 7.4 BLEU points.
The SMT result from is also listed and falls behind our model by 2.6 BLEU points.

Methods
Data Voc BLEU RNNsearch 4.5M 50K 16.5 RNNsearch-LV 4.5M 500K 16.9 SMT 4.5M Full 20.7 Deep-Att (Ours) 4.5M 160K 20.6: English-to-German task: BLEU scores of single neural models. We also list the conventional SMT system for comparison.

Post processing
Two post processing techniques are used to improve the performance further on the English-to-French task.
First, three Deep-Att models are built for ensemble results. They are initialized with different random parameters; in addition, the training corpus for these models is shuffled with different random seeds. We sum over the predicted probabilities of the target words and normalize the final distribution to generate the next word. It is shown in Tab. 8 that the model ensemble can improve the performance further to 38.9. In and there are eight models for the best scores, but we only use three models and we do not obtain further gain from more models.: BLEU scores of different models. The first two blocks are our results of two single models and models with post processing. In the last block we list two baselines of the best conventional SMT system and NMT system.
Second, we recover the unknown words in the generated sequences with the Positional Unknown (PosUnk) model introduced in. The full parallel corpus is used to obtain the word mappings. We find this method provides an additional 1.5 BLEU points, which is consistent with the conclusion in. We obtain the new BLEU score of 39.2 with a single Deep-Att model. For the ensemble models of Deep-Att, the BLEU score rises to 40.4. In the last two lines, we list the conventional SMT model and the previous best neural models based system Enc-Dec for comparison. We find our best score outperforms the previous best score by nearly 3 points.

Analysis

Length
On the English-to-French task, we analyze the effect of the source sentence length on our models as shown in. Here we show five curves: our Deep-Att single model, our Deep-Att ensemble model, our Deep-ED model, a previously proposed Enc-Dec model with four layers and an SMT model. We find our Deep-Att model works better than the previous two models (Enc-Dec and SMT) on nearly all sentence lengths. It is also shown that for very long sequences with length over 70 words, the performance of our Deep-Att does not degrade, when compared to another NMT model Enc-Dec. Our Deep-ED also has much better performance than the shallow Enc-Dec model on nearly all lengths, although for long sequences it degrades and starts to fall behind Deep-Att.

Unknown words
Next we look into the detail of the effect of unknown words on the English-to-French task. We select the subset without unknown words on target sentences from the original test set. There are 1705 such sentences (56.8%). We compute the BLEU scores on this subset and the results are shown in Tab. 9. We also list the results from SMT model    the score 37.7 on the full test set. On this subset, the SMT model achieves 37.5, which is similar to its score 37.0 on the full test set. This suggests that the difficulty on this subset is not much different from that on the full set. We therefore attribute the larger gap for Deep-att to the existence of unknown words. We also compute the BLEU score on the subset of the ensemble model and obtain 41.4. As a reference related to human performance, in, it has been tested that the BLEU score of oracle re-scoring the LIUM 1000-best results is 45.

Over-fitting
Deep models have more parameters, and thus have a stronger ability to fit the large data set. However, our experimental results suggest that deep models are less prone to the problem of over-fitting.
In, we show three results from models with a different depth on the English-to-French task. These three models are evaluated by token error rate, which is defined as the ratio of incorrectly predicted words in the whole target sequence with correct historical input. The curve with square marks corresponds to Deep-Att with n e = 9 and n d = 7. The curve with circle marks corresponds ton e = 5 and n d = 3. The curve with triangle marks corresponds ton e = 1 and n d = 1. We find that the deep model has better performance on the test set when the token error rate is the same as that of the shallow models on the training set. This shows that, with decreased token error rate, the deep model is more advantageous in avoiding the over-fitting phenomenon. We only plot the early training stage curves because, during the late training stage, the curves are not smooth.

Conclusion
With the introduction of fast-forward connections to the deep LSTM network, we build a fast path with neither non-linear transformations nor recurrent computation to propagate the gradients from the top to the deep bottom. On this path, gradients decay much slower compared to the standard deep network. This enables us to build the deep topology of NMT models.
We trained NMT models with depth of 16 including 25 LSTM layers and evaluated them mainly on the WMT'14 English-to-French translation task. This is the deepest topology that has been investigated in the NMT are a on this task. We showed that our Deep-Att exhibits 6.2 BLEU points improvement over the previous best single model, achieving a 37.7 BLEU score. This single end-toend NMT model outperforms the best conventional SMT system and achieves a state-of-the-art performance. After utilizing unknown word processing and model ensemble of three models, we obtained a BLEU score of 40.4, an improvement of 2.9 BLEU points over the previous best result. When evaluated on the subset of the test corpus without unknown words, our model achieves 41.4. Our model is also validated on the more difficult English-to-German task.
Our model is also efficient in sequence generation. The best results from both a single model and model ensemble are obtained with a beam size of 3, much smaller than previous NMT systems where beam size is about 12